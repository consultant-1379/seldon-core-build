#
# COPYRIGHT Ericsson 2022
#
#
#
# The copyright to the computer program(s) herein is the property of
#
# Ericsson Inc. The programs may be used and/or copied only with written
#
# permission from Ericsson Inc. or in accordance with the terms and
#
# conditions stipulated in the agreement/contract under which the
#
# program(s) have been supplied.
#

modelVersion: '3.0'
2pp_dependencies:
- name: Common Base OS
  version: 6.17.0
  abc_number: APR9010622
  evms:
    register: 'yes'
  category: ''
- name: Stdout Redirect
  version: 1.38.0
  abc_number: CXA30176
  evms:
    register: 'yes'
  category: ''
dependencies:
- ID: attrs+23.1.0
  additional_info:
    fossa-attribution:
      Description: "<p align=\"center\">  <a href=\"https://www.attrs.org/\">    <img
        src=\"https://raw.githubusercontent.com/python-attrs/attrs/main/docs/_static/attrs_logo.svg\"
        width=\"35%\" alt=\"attrs\" />  </a></p>*attrs* is the Python package that
        will bring back the **joy** of **writing classes** by relieving you from the
        drudgery of implementing object protocols (aka [dunder methods](https://www.attrs.org/en/latest/glossary.html#term-dunder-methods)).[Trusted
        by NASA](https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/customizing-your-profile/personalizing-your-profile#list-of-qualifying-repositories-for-mars-2020-helicopter-contributor-achievement)
        for Mars missions since 2020!Its main goal is to help you to write **concise**
        and **correct** software without slowing down your code.## Sponsors*attrs*
        would not be possible without our [amazing sponsors](https://github.com/sponsors/hynek).Especially
        those generously supporting us at the *The Organization* tier and higher:<p
        align=\"center\">   <a href=\"https://www.variomedia.de/\">      <img src=\"https://raw.githubusercontent.com/python-attrs/attrs/main/.github/sponsors/Variomedia.svg\"
        width=\"200\" height=\"60\"></img>   </a>   <a href=\"https://tidelift.com/subscription/pkg/pypi-attrs?utm_source=pypi-attrs&utm_medium=referral&utm_campaign=enterprise&utm_term=repo\">
        \     <img src=\"https://raw.githubusercontent.com/python-attrs/attrs/main/.github/sponsors/Tidelift.svg\"
        width=\"200\" height=\"60\"></img>   </a>   <a href=\"https://sentry.io/\">
        \     <img src=\"https://raw.githubusercontent.com/python-attrs/attrs/main/.github/sponsors/Sentry.svg\"
        width=\"200\" height=\"60\"></img>   </a>   <a href=\"https://filepreviews.io/\">
        \     <img src=\"https://raw.githubusercontent.com/python-attrs/attrs/main/.github/sponsors/FilePreviews.svg\"
        width=\"200\" height=\"60\"></img>   </a></p><p align=\"center\">   <strong>Please
        consider <a href=\"https://github.com/sponsors/hynek\">joining them</a> to
        help make <em>attrs</em>\u2019s maintenance more sustainable!</strong></p><!--
        teaser-end -->## Example*attrs* gives you a class decorator and a way to declaratively
        define the attributes on that class:<!-- code-begin -->```pycon>>> from attrs
        import asdict, define, make_class, Factory>>> @define... class SomeClass:...
        \    a_number: int = 42...     list_of_numbers: list[int] = Factory(list)......
        \    def hard_math(self, another_number):...         return self.a_number
        + sum(self.list_of_numbers) * another_number>>> sc = SomeClass(1, [1, 2, 3])>>>
        scSomeClass(a_number=1, list_of_numbers=[1, 2, 3])>>> sc.hard_math(3)19>>>
        sc == SomeClass(1, [1, 2, 3])True>>> sc != SomeClass(2, [3, 2, 1])True>>>
        asdict(sc){'a_number': 1, 'list_of_numbers': [1, 2, 3]}>>> SomeClass()SomeClass(a_number=42,
        list_of_numbers=[])>>> C = make_class(\"C\", [\"a\", \"b\"])>>> C(\"foo\",
        \"bar\")C(a='foo', b='bar')```After *declaring* your attributes, *attrs* gives
        you:- a concise and explicit overview of the class's attributes,- a nice human-readable
        `__repr__`,- equality-checking methods,- an initializer,- and much more,*without*
        writing dull boilerplate code again and again and *without* runtime performance
        penalties.**Hate type annotations**!?No problem!Types are entirely **optional**
        with *attrs*.Simply assign `attrs.field()` to the attributes instead of annotating
        them with types.---This example uses *attrs*'s modern APIs that have been
        introduced in version 20.1.0, and the *attrs* package import name that has
        been added in version 21.3.0.The classic APIs (`@attr.s`, `attr.ib`, plus
        their serious-business aliases) and the `attr` package import name will remain
        **indefinitely**.Please check out [*On The Core API Names*](https://www.attrs.org/en/latest/names.html)
        for a more in-depth explanation.## Data ClassesOn the tin, *attrs* might remind
        you of `dataclasses` (and indeed, `dataclasses` [are a descendant](https://hynek.me/articles/import-attrs/)
        of *attrs*).In practice it does a lot more and is more flexible.For instance
        it allows you to define [special handling of NumPy arrays for equality checks](https://www.attrs.org/en/stable/comparison.html#customization),
        or allows more ways to [plug into the initialization process](https://www.attrs.org/en/stable/init.html#hooking-yourself-into-initialization).For
        more details, please refer to our [comparison page](https://www.attrs.org/en/stable/why.html#data-classes).##
        Project Information- [**Changelog**](https://www.attrs.org/en/stable/changelog.html)-
        [**Documentation**](https://www.attrs.org/)- [**PyPI**](https://pypi.org/project/attrs/)-
        [**Source Code**](https://github.com/python-attrs/attrs)- [**Contributing**](https://github.com/python-attrs/attrs/blob/main/.github/CONTRIBUTING.md)-
        [**Third-party Extensions**](https://github.com/python-attrs/attrs/wiki/Extensions-to-attrs)-
        **License**: [MIT](https://www.attrs.org/en/latest/license.html)- **Get Help**:
        please use the `python-attrs` tag on [StackOverflow](https://stackoverflow.com/questions/tagged/python-attrs)-
        **Supported Python Versions**: 3.7 and later### *attrs* for EnterpriseAvailable
        as part of the Tidelift Subscription.The maintainers of *attrs* and thousands
        of other packages are working with Tidelift to deliver commercial support
        and maintenance for the open source packages you use to build your applications.Save
        time, reduce risk, and improve code health, while paying the maintainers of
        the exact packages you use.[Learn more.](https://tidelift.com/subscription/pkg/pypi-attrs?utm_source=pypi-attrs&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)##
        Release Information### Backwards-incompatible Changes- Python 3.6 has been
        dropped and packaging switched to static package data using [Hatch](https://hatch.pypa.io/latest/).
        \ [#993](https://github.com/python-attrs/attrs/issues/993)### Deprecations-
        The support for *zope-interface* via the `attrs.validators.provides` validator
        is now deprecated and will be removed in, or after, April 2024.  The presence
        of a C-based package in our developement dependencies has caused headaches
        and we're not under the impression it's used a lot.  Let us know if you're
        using it and we might publish it as a separate package.  [#1120](https://github.com/python-attrs/attrs/issues/1120)###
        Changes- `attrs.filters.exclude()` and `attrs.filters.include()` now support
        the passing of attribute names as strings.  [#1068](https://github.com/python-attrs/attrs/issues/1068)-
        `attrs.has()` and `attrs.fields()` now handle generic classes correctly.  [#1079](https://github.com/python-attrs/attrs/issues/1079)-
        Fix frozen exception classes when raised within e.g. `contextlib.contextmanager`,
        which mutates their `__traceback__` attributes.  [#1081](https://github.com/python-attrs/attrs/issues/1081)-
        `@frozen` now works with type checkers that implement [PEP-681](https://peps.python.org/pep-0681/)
        (ex. [pyright](https://github.com/microsoft/pyright/)).  [#1084](https://github.com/python-attrs/attrs/issues/1084)-
        Restored ability to unpickle instances pickled before 22.2.0.  [#1085](https://github.com/python-attrs/attrs/issues/1085)-
        `attrs.asdict()`'s and `attrs.astuple()`'s type stubs now accept the `attrs.AttrsInstance`
        protocol.  [#1090](https://github.com/python-attrs/attrs/issues/1090)- Fix
        slots class cellvar updating closure in CPython 3.8+ even when `__code__`
        introspection is unavailable.  [#1092](https://github.com/python-attrs/attrs/issues/1092)-
        `attrs.resolve_types()` can now pass `include_extras` to `typing.get_type_hints()`
        on Python 3.9+, and does so by default.  [#1099](https://github.com/python-attrs/attrs/issues/1099)-
        Added instructions for pull request workflow to `CONTRIBUTING.md`.  [#1105](https://github.com/python-attrs/attrs/issues/1105)-
        Added *type* parameter to `attrs.field()` function for use with `attrs.make_class()`.
        \ Please note that type checkers ignore type metadata passed into `make_class()`,
        but it can be useful if you're wrapping _attrs_.  [#1107](https://github.com/python-attrs/attrs/issues/1107)-
        It is now possible for `attrs.evolve()` (and `attr.evolve()`) to change fields
        named `inst` if the instance is passed as a positional argument.  Passing
        the instance using the `inst` keyword argument is now deprecated and will
        be removed in, or after, April 2024.  [#1117](https://github.com/python-attrs/attrs/issues/1117)-
        `attrs.validators.optional()` now also accepts a tuple of validators (in addition
        to lists of validators).  [#1122](https://github.com/python-attrs/attrs/issues/1122)---[Full
        changelog](https://www.attrs.org/en/stable/changelog.html)"
      Package: attrs
      Source: pip
      Version: 23.1.0
      Hash: ''
      licenses:
      - MIT
      Title: attrs
      DownloadURL: https://files.pythonhosted.org/packages/97/90/81f95d5f705be17872843536b1868f351805acf6971251ff07c1b8334dbb/attrs-23.1.0.tar.gz
  bazaar:
    register: 'no'
    prim: 16/CTX1020696
    community_link: https://github.com/python-attrs/attrs
    community_name: https://github.com/python-attrs/attrs
    community_url: https://github.com/python-attrs/attrs
    component_comment: ''
    component_highlevel_description: Classes Without Boilerplate.Its main goal is
      to help you to write concise and correct software without slowing down your
      code.
    component_name: attrs, Python
    component_platform: linux
    component_programing_language: Python
    component_version: 23.1.0
    licenses:
    - FAL1159008 (MIT License (MIT))
    src_download_link: https://github.com/python-attrs/attrs/archive/refs/tags/23.1.0.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1044658&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: Germany
    crypto: No Encryption
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: attrs
    target_sw: linux
    vendor: pip
    version: 23.1.0
    web_url: https://pypi.org/project/attrs/23.1.0/
  licenses:
  - MIT
  name: attrs
  primary:
  - this
  subcomponent: false
  type: FOSS
  versions:
  - 23.1.0
  mimer:
    linking: Static
    product_number: CTX1020696
    product_version_label: 23.1.0
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'True'
- ID: certifi+2023.7.22
  additional_info:
    fossa-attribution:
      Description: 'Certifi: Python SSL Certificates================================Certifi
        provides Mozilla''s carefully curated collection of Root Certificates forvalidating
        the trustworthiness of SSL certificates while verifying the identityof TLS
        hosts. It has been extracted from the `Requests`_ project.Installation------------``certifi``
        is available on PyPI. Simply install it with ``pip``::    $ pip install certifiUsage-----To
        reference the installed certificate authority (CA) bundle, you can use thebuilt-in
        function::    >>> import certifi    >>> certifi.where()    ''/usr/local/lib/python3.7/site-packages/certifi/cacert.pem''Or
        from the command line::    $ python -m certifi    /usr/local/lib/python3.7/site-packages/certifi/cacert.pemEnjoy!..
        _`Requests`: https://requests.readthedocs.io/en/master/Addition/Removal of
        Certificates--------------------------------Certifi does not support any addition/removal
        or other modification of theCA trust store content. This project is intended
        to provide a reliable andhighly portable root of trust to python deployments.
        Look to upstream projectsfor methods to use alternate trust.'
      Package: certifi
      Source: pip
      Version: 2023.7.22
      Hash: ''
      licenses:
      - MPL-2.0
      Title: certifi
      DownloadURL: https://files.pythonhosted.org/packages/98/98/c2ff18671db109c9f10ed27f5ef610ae05b73bd876664139cf95bd1429aa/certifi-2023.7.22.tar.gz
  bazaar:
    register: 'no'
    prim: 37/CTX1020628
    community_link: https://github.com/certifi/python-certifi
    community_name: https://github.com/certifi/python-certifi
    community_url: https://github.com/certifi/python-certifi
    component_comment: ''
    component_highlevel_description: (Python Distribution) A carefully curated collection
      of Root Certificates for validating the trustworthiness of SSL certificates
      while verifying the identity of TLS hosts.
    component_name: certifi, Python
    component_platform: linux
    component_programing_language: Python
    component_version: 2023.7.22
    licenses:
    - FAL1159005/20 (Mozilla Public License 2.0 (MPL-2.0))
    src_download_link: https://github.com/certifi/python-certifi/archive/refs/tags/2023.07.22.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1054391&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: United States
    crypto: No Encryption
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: certifi
    target_sw: linux
    vendor: pip
    version: 2023.7.22
    web_url: https://github.com/certifi/python-certifi
  licenses:
  - MPL-2.0
  name: certifi
  primary:
  - this
  subcomponent: false
  type: FOSS
  versions:
  - 2023.7.22
  mimer:
    linking: Static
    product_number: CTX1020628
    product_version_label: 2023.07.22
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'True'
- ID: cffi+1.15.1
  additional_info:
    fossa-attribution:
      Description: CFFI====Foreign Function Interface for Python calling C code.Please
        see the `Documentation <http://cffi.readthedocs.org/>`_.Contact-------`Mailing
        list <https://groups.google.com/forum/#!forum/python-cffi>`_
      Package: cffi
      Source: pip
      Version: 1.15.1
      Hash: ''
      licenses:
      - MIT
      Title: cffi
      DownloadURL: https://files.pythonhosted.org/packages/2b/a8/050ab4f0c3d4c1b8aaa805f70e26e84d0e27004907c5b8ecc1d31815f92a/cffi-1.15.1.tar.gz
  bazaar:
    register: 'no'
    prim: 22/CAX1058290
    community_link: https://pypi.org/project/cffi
    community_name: https://pypi.org/project/cffi
    community_url: https://pypi.org/project/cffi
    component_comment: ''
    component_highlevel_description: 'Foreign Function Interface for Python calling
      C code.

      CFFI

      ====


      Foreign Function Interface for Python calling C code.

      Please see the `Documentation <http://cffi.readthedocs.org/>`_.


      Contact

      -------


      `Mailing list <https://groups.google.com/forum/#!forum/python-cffi>`_'
    component_name: CFFI, Python
    component_platform: linux
    component_programing_language: Common Lisp
    component_version: 1.15.1
    licenses:
    - FAL1159008 (MIT License (MIT))
    src_download_link: https://files.pythonhosted.org/packages/2b/a8/050ab4f0c3d4c1b8aaa805f70e26e84d0e27004907c5b8ecc1d31815f92a/cffi-1.15.1.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1017666&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: United States
    crypto: No Encryption
    programming_language: Common Lisp
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: cffi
    target_sw: linux
    vendor: pip
    version: 1.15.1
    web_url: http://cffi.readthedocs.org
  licenses:
  - MIT
  name: cffi
  primary:
  - this
  subcomponent: false
  type: FOSS
  versions:
  - 1.15.1
  mimer:
    linking: Static
    product_number: CAX1058290
    product_version_label: 1.15.1
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'True'
- ID: charset-normalizer+3.2.0
  additional_info:
    fossa-attribution:
      Description: "<h1 align=\"center\">Charset Detection, for Everyone \U0001F44B</h1><p
        align=\"center\">  <sup>The Real First Universal Charset Detector</sup><br>
        \ <a href=\"https://pypi.org/project/charset-normalizer\">    <img src=\"https://img.shields.io/pypi/pyversions/charset_normalizer.svg?orange=blue\"
        />  </a>  <a href=\"https://pepy.tech/project/charset-normalizer/\">    <img
        alt=\"Download Count Total\" src=\"https://pepy.tech/badge/charset-normalizer/month\"
        />  </a>  <a href=\"https://bestpractices.coreinfrastructure.org/projects/7297\">
        \   <img src=\"https://bestpractices.coreinfrastructure.org/projects/7297/badge\">
        \ </a></p>> A library that helps you read text from an unknown charset encoding.<br
        /> Motivated by `chardet`,> I'm trying to resolve the issue by taking a new
        approach.> All IANA character set names for which the Python core library
        provides codecs are supported.<p align=\"center\">  >>>>> <a href=\"https://charsetnormalizerweb.ousret.now.sh\"
        target=\"_blank\">\U0001F449 Try Me Online Now, Then Adopt Me \U0001F448 </a>
        <<<<<</p>This project offers you an alternative to **Universal Charset Encoding
        Detector**, also known as **Chardet**.| Feature                                          |
        [Chardet](https://github.com/chardet/chardet) |                                           Charset
        Normalizer                                           | [cChardet](https://github.com/PyYoshi/cChardet)
        ||--------------------------------------------------|:---------------------------------------------:|:------------------------------------------------------------------------------------------------------:|:-----------------------------------------------:||
        `Fast`                                           |                     \u274C<br>
        \                    |                                                 \u2705<br>
        \                                                 |                     \u2705
        <br>                      || `Universal**`                                    |
        \                      \u274C                       |                                                   \u2705
        \                                                   |                        \u274C
        \                       || `Reliable` **without** distinguishable standards
        |                       \u274C                       |                                                   \u2705
        \                                                   |                        \u2705
        \                       || `Reliable` **with** distinguishable standards    |
        \                      \u2705                       |                                                   \u2705
        \                                                   |                        \u2705
        \                       || `License`                                        |
        \          LGPL-2.1<br>_restrictive_           |                                                  MIT
        \                                                  |            MPL-1.1<br>_restrictive_
        \            || `Native Python`                                  |                       \u2705
        \                      |                                                   \u2705
        \                                                   |                        \u274C
        \                       || `Detect spoken language`                         |
        \                      \u274C                       |                                                   \u2705
        \                                                   |                       N/A
        \                      || `UnicodeDecodeError Safety`                      |
        \                      \u274C                       |                                                   \u2705
        \                                                   |                        \u274C
        \                       || `Whl Size`                                       |
        \                  193.6 kB                    |                                                 40
        kB                                                  |                     ~200
        kB                     || `Supported Encoding`                             |
        \                     33                       | \U0001F389 [90](https://charset-normalizer.readthedocs.io/en/latest/user/support.html#supported-encodings)
        |                       40                        |<p align=\"center\"><img
        src=\"https://i.imgflip.com/373iay.gif\" alt=\"Reading Normalized Text\" width=\"226\"/><img
        src=\"https://media.tenor.com/images/c0180f70732a18b4965448d33adba3d0/tenor.gif\"
        alt=\"Cat Reading Text\" width=\"200\"/>*\\*\\* : They are clearly using specific
        code for a specific encoding even if covering most of used one*<br> Did you
        got there because of the logs? See [https://charset-normalizer.readthedocs.io/en/latest/user/miscellaneous.html](https://charset-normalizer.readthedocs.io/en/latest/user/miscellaneous.html)##
        \u26A1 PerformanceThis package offer better performance than its counterpart
        Chardet. Here are some numbers.| Package                                       |
        Accuracy | Mean per file (ms) | File per sec (est) ||-----------------------------------------------|:--------:|:------------------:|:------------------:||
        [chardet](https://github.com/chardet/chardet) |   86 %   |       200 ms       |
        \    5 file/sec     || charset-normalizer                            | **98
        %** |     **10 ms**      |    100 file/sec    || Package                                       |
        99th percentile | 95th percentile | 50th percentile ||-----------------------------------------------|:---------------:|:---------------:|:---------------:||
        [chardet](https://github.com/chardet/chardet) |     1200 ms     |     287
        ms      |      23 ms      || charset-normalizer                            |
        \    100 ms      |      50 ms      |      5 ms       |Chardet's performance
        on larger file (1MB+) are very poor. Expect huge difference on large payload.>
        Stats are generated using 400+ files using default parameters. More details
        on used files, see GHA workflows.> And yes, these results might change at
        any time. The dataset can be updated to include more files.> The actual delays
        heavily depends on your CPU capabilities. The factors should remain the same.>
        Keep in mind that the stats are generous and that Chardet accuracy vs our
        is measured using Chardet initial capability> (eg. Supported Encoding) Challenge-them
        if you want.## \u2728 InstallationUsing pip:```shpip install charset-normalizer
        -U```## \U0001F680 Basic Usage### CLIThis package comes with a CLI.```usage:
        normalizer [-h] [-v] [-a] [-n] [-m] [-r] [-f] [-t THRESHOLD]                  file
        [file ...]The Real First Universal Charset Detector. Discover originating
        encoding usedon text file. Normalize text to unicode.positional arguments:
        \ files                 File(s) to be analysedoptional arguments:  -h, --help
        \           show this help message and exit  -v, --verbose         Display
        complementary information about file if any.                        Stdout
        will contain logs about the detection process.  -a, --with-alternative                        Output
        complementary possibilities if any. Top-level                        JSON
        WILL be a list.  -n, --normalize       Permit to normalize input file. If
        not set, program                        does not write anything.  -m, --minimal
        \        Only output the charset detected to STDOUT. Disabling                        JSON
        output.  -r, --replace         Replace file when trying to normalize it instead
        of                        creating a new one.  -f, --force           Replace
        file without asking if you are sure, use this                        flag
        with caution.  -t THRESHOLD, --threshold THRESHOLD                        Define
        a custom maximum amount of chaos allowed in                        decoded
        content. 0. <= chaos <= 1.  --version             Show version information
        and exit.``````bashnormalizer ./data/sample.1.fr.srt```\U0001F389 Since version
        1.4.0 the CLI produce easily usable stdout result in JSON format.```json{
        \   \"path\": \"/home/default/projects/charset_normalizer/data/sample.1.fr.srt\",
        \   \"encoding\": \"cp1252\",    \"encoding_aliases\": [        \"1252\",
        \       \"windows_1252\"    ],    \"alternative_encodings\": [        \"cp1254\",
        \       \"cp1256\",        \"cp1258\",        \"iso8859_14\",        \"iso8859_15\",
        \       \"iso8859_16\",        \"iso8859_3\",        \"iso8859_9\",        \"latin_1\",
        \       \"mbcs\"    ],    \"language\": \"French\",    \"alphabets\": [        \"Basic
        Latin\",        \"Latin-1 Supplement\"    ],    \"has_sig_or_bom\": false,
        \   \"chaos\": 0.149,    \"coherence\": 97.152,    \"unicode_path\": null,
        \   \"is_preferred\": true}```### Python*Just print out normalized text*```pythonfrom
        charset_normalizer import from_pathresults = from_path('./my_subtitle.srt')print(str(results.best()))```*Upgrade
        your code without effort*```pythonfrom charset_normalizer import detect```The
        above code will behave the same as **chardet**. We ensure that we offer the
        best (reasonable) BC result possible.See the docs for advanced usage : [readthedocs.io](https://charset-normalizer.readthedocs.io/en/latest/)##
        \U0001F607 WhyWhen I started using Chardet, I noticed that it was not suited
        to my expectations, and I wanted to propose areliable alternative using a
        completely different method. Also! I never back down on a good challenge!I
        **don't care** about the **originating charset** encoding, because **two different
        tables** canproduce **two identical rendered string.**What I want is to get
        readable text, the best I can. In a way, **I'm brute forcing text decoding.**
        How cool is that ? \U0001F60EDon't confuse package **ftfy** with charset-normalizer
        or chardet. ftfy goal is to repair unicode string whereas charset-normalizer
        to convert raw file in unknown encoding to unicode.## \U0001F370 How  - Discard
        all charset encoding table that could not fit the binary content.  - Measure
        noise, or the mess once opened (by chunks) with a corresponding charset encoding.
        \ - Extract matches with the lowest mess detected.  - Additionally, we measure
        coherence / probe for a language.**Wait a minute**, what is noise/mess and
        coherence according to **YOU ?***Noise :* I opened hundred of text files,
        **written by humans**, with the wrong encoding table. **I observed**, then**I
        established** some ground rules about **what is obvious** when **it seems
        like** a mess. I know that my interpretation of what is noise is probably
        incomplete, feel free to contribute in order to improve or rewrite it.*Coherence
        :* For each language there is on earth, we have computed ranked letter appearance
        occurrences (the best we can). So I thoughtthat intel is worth something here.
        So I use those records against decoded text to check if I can detect intelligent
        design.## \u26A1 Known limitations  - Language detection is unreliable when
        text contains two or more languages sharing identical letters. (eg. HTML (english
        tags) + Turkish content (Sharing Latin characters))  - Every charset detector
        heavily depends on sufficient content. In common cases, do not bother run
        detection on very tiny content.## \u26A0\uFE0F About Python EOLs**If you are
        running:**- Python >=2.7,<3.5: Unsupported- Python 3.5: charset-normalizer
        < 2.1- Python 3.6: charset-normalizer < 3.1Upgrade your Python interpreter
        as soon as possible.## \U0001F464 ContributingContributions, issues and feature
        requests are very much welcome.<br />Feel free to check [issues page](https://github.com/ousret/charset_normalizer/issues)
        if you want to contribute.## \U0001F4DD LicenseCopyright \xA9 [Ahmed TAHRI
        @Ousret](https://github.com/Ousret).<br />This project is [MIT](https://github.com/Ousret/charset_normalizer/blob/master/LICENSE)
        licensed.Characters frequencies used in this project \xA9 2012 [Denny Vrande\u010Di\u0107](http://simia.net/letters/)##
        \U0001F4BC For EnterpriseProfessional support for charset-normalizer is available
        as part of the [TideliftSubscription][1]. Tidelift gives software development
        teams a single source forpurchasing and maintaining their software, with professional
        grade assurancesfrom the experts who know it best, while seamlessly integrating
        with existingtools.[1]: https://tidelift.com/subscription/pkg/pypi-charset-normalizer?utm_source=pypi-charset-normalizer&utm_medium=readme#
        ChangelogAll notable changes to charset-normalizer will be documented in this
        file. This project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).The
        format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).##
        [3.2.0](https://github.com/Ousret/charset_normalizer/compare/3.1.0...3.2.0)
        (2023-06-07)### Changed- Typehint for function `from_path` no longer enforce
        `PathLike` as its first argument- Minor improvement over the global detection
        reliability### Added- Introduce function `is_binary` that relies on main capabilities,
        and optimized to detect binaries- Propagate `enable_fallback` argument throughout
        `from_bytes`, `from_path`, and `from_fp` that allow a deeper control over
        the detection (default True)- Explicit support for Python 3.12### Fixed- Edge
        case detection failure where a file would contain 'very-long' camel cased
        word (Issue #289)## [3.1.0](https://github.com/Ousret/charset_normalizer/compare/3.0.1...3.1.0)
        (2023-03-06)### Added- Argument `should_rename_legacy` for legacy function
        `detect` and disregard any new arguments without errors (PR #262)### Removed-
        Support for Python 3.6 (PR #260)### Changed- Optional speedup provided by
        mypy/c 1.0.1## [3.0.1](https://github.com/Ousret/charset_normalizer/compare/3.0.0...3.0.1)
        (2022-11-18)### Fixed- Multi-bytes cutter/chunk generator did not always cut
        correctly (PR #233)### Changed- Speedup provided by mypy/c 0.990 on Python
        >= 3.7## [3.0.0](https://github.com/Ousret/charset_normalizer/compare/2.1.1...3.0.0)
        (2022-10-20)### Added- Extend the capability of explain=True when cp_isolation
        contains at most two entries (min one), will log in details of the Mess-detector
        results- Support for alternative language frequency set in charset_normalizer.assets.FREQUENCIES-
        Add parameter `language_threshold` in `from_bytes`, `from_path` and `from_fp`
        to adjust the minimum expected coherence ratio- `normalizer --version` now
        specify if current version provide extra speedup (meaning mypyc compilation
        whl)### Changed- Build with static metadata using 'build' frontend- Make the
        language detection stricter- Optional: Module `md.py` can be compiled using
        Mypyc to provide an extra speedup up to 4x faster than v2.1### Fixed- CLI
        with opt --normalize fail when using full path for files- TooManyAccentuatedPlugin
        induce false positive on the mess detection when too few alpha character have
        been fed to it- Sphinx warnings when generating the documentation### Removed-
        Coherence detector no longer return 'Simple English' instead return 'English'-
        Coherence detector no longer return 'Classical Chinese' instead return 'Chinese'-
        Breaking: Method `first()` and `best()` from CharsetMatch- UTF-7 will no longer
        appear as \"detected\" without a recognized SIG/mark (is unreliable/conflict
        with ASCII)- Breaking: Class aliases CharsetDetector, CharsetDoctor, CharsetNormalizerMatch
        and CharsetNormalizerMatches- Breaking: Top-level function `normalize`- Breaking:
        Properties `chaos_secondary_pass`, `coherence_non_latin` and `w_counter` from
        CharsetMatch- Support for the backport `unicodedata2`## [3.0.0rc1](https://github.com/Ousret/charset_normalizer/compare/3.0.0b2...3.0.0rc1)
        (2022-10-18)### Added- Extend the capability of explain=True when cp_isolation
        contains at most two entries (min one), will log in details of the Mess-detector
        results- Support for alternative language frequency set in charset_normalizer.assets.FREQUENCIES-
        Add parameter `language_threshold` in `from_bytes`, `from_path` and `from_fp`
        to adjust the minimum expected coherence ratio### Changed- Build with static
        metadata using 'build' frontend- Make the language detection stricter### Fixed-
        CLI with opt --normalize fail when using full path for files- TooManyAccentuatedPlugin
        induce false positive on the mess detection when too few alpha character have
        been fed to it### Removed- Coherence detector no longer return 'Simple English'
        instead return 'English'- Coherence detector no longer return 'Classical Chinese'
        instead return 'Chinese'## [3.0.0b2](https://github.com/Ousret/charset_normalizer/compare/3.0.0b1...3.0.0b2)
        (2022-08-21)### Added- `normalizer --version` now specify if current version
        provide extra speedup (meaning mypyc compilation whl)### Removed- Breaking:
        Method `first()` and `best()` from CharsetMatch- UTF-7 will no longer appear
        as \"detected\" without a recognized SIG/mark (is unreliable/conflict with
        ASCII)### Fixed- Sphinx warnings when generating the documentation## [3.0.0b1](https://github.com/Ousret/charset_normalizer/compare/2.1.0...3.0.0b1)
        (2022-08-15)### Changed- Optional: Module `md.py` can be compiled using Mypyc
        to provide an extra speedup up to 4x faster than v2.1### Removed- Breaking:
        Class aliases CharsetDetector, CharsetDoctor, CharsetNormalizerMatch and CharsetNormalizerMatches-
        Breaking: Top-level function `normalize`- Breaking: Properties `chaos_secondary_pass`,
        `coherence_non_latin` and `w_counter` from CharsetMatch- Support for the backport
        `unicodedata2`## [2.1.1](https://github.com/Ousret/charset_normalizer/compare/2.1.0...2.1.1)
        (2022-08-19)### Deprecated- Function `normalize` scheduled for removal in
        3.0### Changed- Removed useless call to decode in fn is_unprintable (#206)###
        Fixed- Third-party library (i18n xgettext) crashing not recognizing utf_8
        (PEP 263) with underscore from [@aleksandernovikov](https://github.com/aleksandernovikov)
        (#204)## [2.1.0](https://github.com/Ousret/charset_normalizer/compare/2.0.12...2.1.0)
        (2022-06-19)### Added- Output the Unicode table version when running the CLI
        with `--version` (PR #194)### Changed- Re-use decoded buffer for single byte
        character sets from [@nijel](https://github.com/nijel) (PR #175)- Fixing some
        performance bottlenecks from [@deedy5](https://github.com/deedy5) (PR #183)###
        Fixed- Workaround potential bug in cpython with Zero Width No-Break Space
        located in Arabic Presentation Forms-B, Unicode 1.1 not acknowledged as space
        (PR #175)- CLI default threshold aligned with the API threshold from [@oleksandr-kuzmenko](https://github.com/oleksandr-kuzmenko)
        (PR #181)### Removed- Support for Python 3.5 (PR #192)### Deprecated- Use
        of backport unicodedata from `unicodedata2` as Python is quickly catching
        up, scheduled for removal in 3.0 (PR #194)## [2.0.12](https://github.com/Ousret/charset_normalizer/compare/2.0.11...2.0.12)
        (2022-02-12)### Fixed- ASCII miss-detection on rare cases (PR #170) ## [2.0.11](https://github.com/Ousret/charset_normalizer/compare/2.0.10...2.0.11)
        (2022-01-30)### Added- Explicit support for Python 3.11 (PR #164)### Changed-
        The logging behavior have been completely reviewed, now using only TRACE and
        DEBUG levels (PR #163 #165)## [2.0.10](https://github.com/Ousret/charset_normalizer/compare/2.0.9...2.0.10)
        (2022-01-04)### Fixed- Fallback match entries might lead to UnicodeDecodeError
        for large bytes sequence (PR #154)### Changed- Skipping the language-detection
        (CD) on ASCII (PR #155)## [2.0.9](https://github.com/Ousret/charset_normalizer/compare/2.0.8...2.0.9)
        (2021-12-03)### Changed- Moderating the logging impact (since 2.0.8) for specific
        environments (PR #147)### Fixed- Wrong logging level applied when setting
        kwarg `explain` to True (PR #146)## [2.0.8](https://github.com/Ousret/charset_normalizer/compare/2.0.7...2.0.8)
        (2021-11-24)### Changed- Improvement over Vietnamese detection (PR #126)-
        MD improvement on trailing data and long foreign (non-pure latin) data (PR
        #124)- Efficiency improvements in cd/alphabet_languages from [@adbar](https://github.com/adbar)
        (PR #122)- call sum() without an intermediary list following PEP 289 recommendations
        from [@adbar](https://github.com/adbar) (PR #129)- Code style as refactored
        by Sourcery-AI (PR #131) - Minor adjustment on the MD around european words
        (PR #133)- Remove and replace SRTs from assets / tests (PR #139)- Initialize
        the library logger with a `NullHandler` by default from [@nmaynes](https://github.com/nmaynes)
        (PR #135)- Setting kwarg `explain` to True will add provisionally (bounded
        to function lifespan) a specific stream handler (PR #135)### Fixed- Fix large
        (misleading) sequence giving UnicodeDecodeError (PR #137)- Avoid using too
        insignificant chunk (PR #137)### Added- Add and expose function `set_logging_handler`
        to configure a specific StreamHandler from [@nmaynes](https://github.com/nmaynes)
        (PR #135)- Add `CHANGELOG.md` entries, format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)
        (PR #141)## [2.0.7](https://github.com/Ousret/charset_normalizer/compare/2.0.6...2.0.7)
        (2021-10-11)### Added- Add support for Kazakh (Cyrillic) language detection
        (PR #109)### Changed- Further, improve inferring the language from a given
        single-byte code page (PR #112)- Vainly trying to leverage PEP263 when PEP3120
        is not supported (PR #116)- Refactoring for potential performance improvements
        in loops from [@adbar](https://github.com/adbar) (PR #113)- Various detection
        improvement (MD+CD) (PR #117)### Removed- Remove redundant logging entry about
        detected language(s) (PR #115)### Fixed- Fix a minor inconsistency between
        Python 3.5 and other versions regarding language detection (PR #117 #102)##
        [2.0.6](https://github.com/Ousret/charset_normalizer/compare/2.0.5...2.0.6)
        (2021-09-18)### Fixed- Unforeseen regression with the loss of the backward-compatibility
        with some older minor of Python 3.5.x (PR #100)- Fix CLI crash when using
        --minimal output in certain cases (PR #103)### Changed- Minor improvement
        to the detection efficiency (less than 1%) (PR #106 #101)## [2.0.5](https://github.com/Ousret/charset_normalizer/compare/2.0.4...2.0.5)
        (2021-09-14)### Changed- The project now comply with: flake8, mypy, isort
        and black to ensure a better overall quality (PR #81)- The BC-support with
        v1.x was improved, the old staticmethods are restored (PR #82)- The Unicode
        detection is slightly improved (PR #93)- Add syntax sugar \\_\\_bool\\_\\_
        for results CharsetMatches list-container (PR #91)### Removed- The project
        no longer raise warning on tiny content given for detection, will be simply
        logged as warning instead (PR #92)### Fixed- In some rare case, the chunks
        extractor could cut in the middle of a multi-byte character and could mislead
        the mess detection (PR #95)- Some rare 'space' characters could trip up the
        UnprintablePlugin/Mess detection (PR #96)- The MANIFEST.in was not exhaustive
        (PR #78)## [2.0.4](https://github.com/Ousret/charset_normalizer/compare/2.0.3...2.0.4)
        (2021-07-30)### Fixed- The CLI no longer raise an unexpected exception when
        no encoding has been found (PR #70)- Fix accessing the 'alphabets' property
        when the payload contains surrogate characters (PR #68)- The logger could
        mislead (explain=True) on detected languages and the impact of one MBCS match
        (PR #72)- Submatch factoring could be wrong in rare edge cases (PR #72)- Multiple
        files given to the CLI were ignored when publishing results to STDOUT. (After
        the first path) (PR #72)- Fix line endings from CRLF to LF for certain project
        files (PR #67)### Changed- Adjust the MD to lower the sensitivity, thus improving
        the global detection reliability (PR #69 #76)- Allow fallback on specified
        encoding if any (PR #71)## [2.0.3](https://github.com/Ousret/charset_normalizer/compare/2.0.2...2.0.3)
        (2021-07-16)### Changed- Part of the detection mechanism has been improved
        to be less sensitive, resulting in more accurate detection results. Especially
        ASCII. (PR #63)- According to the community wishes, the detection will fall
        back on ASCII or UTF-8 in a last-resort case. (PR #64)## [2.0.2](https://github.com/Ousret/charset_normalizer/compare/2.0.1...2.0.2)
        (2021-07-15)### Fixed- Empty/Too small JSON payload miss-detection fixed.
        Report from [@tseaver](https://github.com/tseaver) (PR #59) ### Changed- Don't
        inject unicodedata2 into sys.modules from [@akx](https://github.com/akx) (PR
        #57)## [2.0.1](https://github.com/Ousret/charset_normalizer/compare/2.0.0...2.0.1)
        (2021-07-13)### Fixed- Make it work where there isn't a filesystem available,
        dropping assets frequencies.json. Report from [@sethmlarson](https://github.com/sethmlarson).
        (PR #55)- Using explain=False permanently disable the verbose output in the
        current runtime (PR #47)- One log entry (language target preemptive) was not
        show in logs when using explain=True (PR #47)- Fix undesired exception (ValueError)
        on getitem of instance CharsetMatches (PR #52)### Changed- Public function
        normalize default args values were not aligned with from_bytes (PR #53)###
        Added- You may now use charset aliases in cp_isolation and cp_exclusion arguments
        (PR #47)## [2.0.0](https://github.com/Ousret/charset_normalizer/compare/1.4.1...2.0.0)
        (2021-07-02)### Changed- 4x to 5 times faster than the previous 1.4.0 release.
        At least 2x faster than Chardet.- Accent has been made on UTF-8 detection,
        should perform rather instantaneous.- The backward compatibility with Chardet
        has been greatly improved. The legacy detect function returns an identical
        charset name whenever possible.- The detection mechanism has been slightly
        improved, now Turkish content is detected correctly (most of the time)- The
        program has been rewritten to ease the readability and maintainability. (+Using
        static typing)+- utf_7 detection has been reinstated.### Removed- This package
        no longer require anything when used with Python 3.5 (Dropped cached_property)-
        Removed support for these languages: Catalan, Esperanto, Kazakh, Baque, Volap\xFCk,
        Azeri, Galician, Nynorsk, Macedonian, and Serbocroatian.- The exception hook
        on UnicodeDecodeError has been removed.### Deprecated- Methods coherence_non_latin,
        w_counter, chaos_secondary_pass of the class CharsetMatch are now deprecated
        and scheduled for removal in v3.0### Fixed- The CLI output used the relative
        path of the file(s). Should be absolute.## [1.4.1](https://github.com/Ousret/charset_normalizer/compare/1.4.0...1.4.1)
        (2021-05-28)### Fixed- Logger configuration/usage no longer conflict with
        others (PR #44)## [1.4.0](https://github.com/Ousret/charset_normalizer/compare/1.3.9...1.4.0)
        (2021-05-21)### Removed- Using standard logging instead of using the package
        loguru.- Dropping nose test framework in favor of the maintained pytest.-
        Choose to not use dragonmapper package to help with gibberish Chinese/CJK
        text.- Require cached_property only for Python 3.5 due to constraint. Dropping
        for every other interpreter version.- Stop support for UTF-7 that does not
        contain a SIG.- Dropping PrettyTable, replaced with pure JSON output in CLI.###
        Fixed- BOM marker in a CharsetNormalizerMatch instance could be False in rare
        cases even if obviously present. Due to the sub-match factoring process.-
        Not searching properly for the BOM when trying utf32/16 parent codec.### Changed-
        Improving the package final size by compressing frequencies.json.- Huge improvement
        over the larges payload.### Added- CLI now produces JSON consumable output.-
        Return ASCII if given sequences fit. Given reasonable confidence.## [1.3.9](https://github.com/Ousret/charset_normalizer/compare/1.3.8...1.3.9)
        (2021-05-13)### Fixed- In some very rare cases, you may end up getting encode/decode
        errors due to a bad bytes payload (PR #40)## [1.3.8](https://github.com/Ousret/charset_normalizer/compare/1.3.7...1.3.8)
        (2021-05-12)### Fixed- Empty given payload for detection may cause an exception
        if trying to access the `alphabets` property. (PR #39)## [1.3.7](https://github.com/Ousret/charset_normalizer/compare/1.3.6...1.3.7)
        (2021-05-12)### Fixed- The legacy detect function should return UTF-8-SIG
        if sig is present in the payload. (PR #38)## [1.3.6](https://github.com/Ousret/charset_normalizer/compare/1.3.5...1.3.6)
        (2021-02-09)### Changed- Amend the previous release to allow prettytable 2.0
        (PR #35)## [1.3.5](https://github.com/Ousret/charset_normalizer/compare/1.3.4...1.3.5)
        (2021-02-08)### Fixed- Fix error while using the package with a python pre-release
        interpreter (PR #33)### Changed- Dependencies refactoring, constraints revised.###
        Added- Add python 3.9 and 3.10 to the supported interpretersMIT LicenseCopyright
        (c) 2019 TAHRI Ahmed R.Permission is hereby granted, free of charge, to any
        person obtaining a copyof this software and associated documentation files
        (the \"Software\"), to dealin the Software without restriction, including
        without limitation the rightsto use, copy, modify, merge, publish, distribute,
        sublicense, and/or sellcopies of the Software, and to permit persons to whom
        the Software isfurnished to do so, subject to the following conditions:The
        above copyright notice and this permission notice shall be included in allcopies
        or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\",
        WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED
        TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND
        NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE
        FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT,
        TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE
        OR THE USE OR OTHER DEALINGS IN THESOFTWARE."
      Package: charset-normalizer
      Source: pip
      Version: 3.2.0
      Hash: ''
      licenses:
      - MIT
      Title: charset-normalizer
      DownloadURL: https://files.pythonhosted.org/packages/2a/53/cf0a48de1bdcf6ff6e1c9a023f5f523dfe303e4024f216feac64b6eb7f67/charset-normalizer-3.2.0.tar.gz
  bazaar:
    register: 'no'
    prim: 18/CTX1032640
    community_link: https://github.com/Ousret/charset_normalizer
    community_name: https://github.com/Ousret/charset_normalizer
    community_url: https://github.com/Ousret/charset_normalizer
    component_comment: ''
    component_highlevel_description: A Library that helps you read text from unknown
      charset encoding. This project is motivated by chardet.
    component_name: Charset Detection
    component_platform: linux
    component_programing_language: Python
    component_version: 3.2.0
    licenses:
    - FAL1159008 (MIT License (MIT))
    src_download_link: https://github.com/Ousret/charset_normalizer/archive/3.2.0.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1052357&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: France
    crypto: No Encryption
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: charset-normalizer
    target_sw: linux
    vendor: pip
    version: 3.2.0
    web_url: https://github.com/Ousret/charset_normalizer
  licenses:
  - MIT
  name: charset-normalizer
  primary:
  - this
  subcomponent: false
  type: FOSS
  versions:
  - 3.2.0
  mimer:
    linking: Static
    product_number: CTX1032640
    product_version_label: 3.2.0
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'True'
- ID: click+8.0.4
  additional_info:
    fossa-attribution:
      Description: '\$ click\_==========Click is a Python package for creating beautiful
        command line interfacesin a composable way with as little code as necessary.
        It''s the "CommandLine Interface Creation Kit". It''s highly configurable
        but comes withsensible defaults out of the box.It aims to make the process
        of writing command line tools quick and funwhile also preventing any frustration
        caused by the inability toimplement an intended CLI API.Click in three points:-   Arbitrary
        nesting of commands-   Automatic help page generation-   Supports lazy loading
        of subcommands at runtimeInstalling----------Install and update using `pip`_:..
        code-block:: text    $ pip install -U click.. _pip: https://pip.pypa.io/en/stable/getting-started/A
        Simple Example----------------.. code-block:: python    import click    @click.command()    @click.option("--count",
        default=1, help="Number of greetings.")    @click.option("--name", prompt="Your
        name", help="The person to greet.")    def hello(count, name):        """Simple
        program that greets NAME for a total of COUNT times."""        for _ in range(count):            click.echo(f"Hello,
        {name}!")    if __name__ == ''__main__'':        hello().. code-block:: text    $
        python hello.py --count=3    Your name: Click    Hello, Click!    Hello, Click!    Hello,
        Click!Donate------The Pallets organization develops and supports Click and
        other popularpackages. In order to grow the community of contributors and
        users, andallow the maintainers to devote more time to the projects, `pleasedonate
        today`_... _please donate today: https://palletsprojects.com/donateLinks------   Documentation:
        https://click.palletsprojects.com/-   Changes: https://click.palletsprojects.com/changes/-   PyPI
        Releases: https://pypi.org/project/click/-   Source Code: https://github.com/pallets/click-   Issue
        Tracker: https://github.com/pallets/click/issues-   Chat: https://discord.gg/pallets'
      Package: click
      Source: pip
      Version: 8.0.4
      Hash: ''
      licenses:
      - BSD-3-Clause
      - ISC
      Title: click
      DownloadURL: https://files.pythonhosted.org/packages/dd/cf/706c1ad49ab26abed0b77a2f867984c1341ed7387b8030a6aa914e2942a0/click-8.0.4.tar.gz
  bazaar:
    register: 'no'
    prim: 11/CAX1058601
    community_link: https://github.com/pallets/click
    community_name: https://github.com/pallets/click
    community_url: https://github.com/pallets/click
    component_comment: ''
    component_highlevel_description: Python composable command line interface toolkit
    component_name: Click
    component_platform: linux
    component_programing_language: Python
    component_version: 8.0.4
    licenses:
    - FAL1159003/2 (BSD 3-Clause (BSD-3-Clause))
    src_download_link: https://github.com/pallets/click/archive/8.0.4.tar.gz
    stako_decision_reason: allowed
    stako: ESW4
    stako_comment: Product version is older than 18 months. Newer versions exists
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1004081&id-filter=equals&rowDisplay=Card-Simple
    recode: REL
    retext: PRODUCT VERSION IS OLDER THAN 18 MONTHS. NEWER VERSIONS EXISTS
    country: Austria
    crypto: No Encryption
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: click
    target_sw: linux
    vendor: pip
    version: 8.0.4
    web_url: https://palletsprojects.com/p/click/
  licenses:
  - BSD-3-Clause
  - ISC
  name: click
  primary:
  - this
  subcomponent: false
  type: FOSS
  versions:
  - 8.0.4
  mimer:
    linking: Static
    product_number: CAX1058601
    product_version_label: 8.0.4
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'True'
    selected_licenses:
    - BSD-3-Clause
  alerts:
  - Stako is 'ESW4', BAZAAR component is not recommended to be used
- ID: cryptography+41.0.3
  additional_info:
    fossa-attribution:
      Description: 'pyca/cryptography=================.. image:: https://img.shields.io/pypi/v/cryptography.svg    :target:
        https://pypi.org/project/cryptography/    :alt: Latest Version.. image:: https://readthedocs.org/projects/cryptography/badge/?version=latest    :target:
        https://cryptography.io    :alt: Latest Docs.. image:: https://github.com/pyca/cryptography/workflows/CI/badge.svg?branch=master    :target:
        https://github.com/pyca/cryptography/actions?query=workflow%3ACI+branch%3Amaster..
        image:: https://codecov.io/github/pyca/cryptography/coverage.svg?branch=master    :target:
        https://codecov.io/github/pyca/cryptography?branch=master``cryptography``
        is a package which provides cryptographic recipes andprimitives to Python
        developers.  Our goal is for it to be your "cryptographicstandard library".
        It supports Python 3.6+ and PyPy3 7.2+.``cryptography`` includes both high
        level recipes and low level interfaces tocommon cryptographic algorithms such
        as symmetric ciphers, message digests, andkey derivation functions. For example,
        to encrypt something with``cryptography``''s high level symmetric encryption
        recipe:.. code-block:: pycon    >>> from cryptography.fernet import Fernet    >>>
        # Put this somewhere safe!    >>> key = Fernet.generate_key()    >>> f = Fernet(key)    >>>
        token = f.encrypt(b"A really secret message. Not for prying eyes.")    >>>
        token    ''...''    >>> f.decrypt(token)    ''A really secret message. Not
        for prying eyes.''You can find more information in the `documentation`_.You
        can install ``cryptography`` with:.. code-block:: console    $ pip install
        cryptographyFor full details see `the installation documentation`_.Discussion~~~~~~~~~~If
        you run into bugs, you can file them in our `issue tracker`_.We maintain a
        `cryptography-dev`_ mailing list for development discussion.You can also join
        ``#cryptography-dev`` on Freenode to ask questions or getinvolved.Security~~~~~~~~Need
        to report a security issue? Please consult our `security reporting`_documentation...
        _`documentation`: https://cryptography.io/.. _`the installation documentation`:
        https://cryptography.io/en/latest/installation.html.. _`issue tracker`: https://github.com/pyca/cryptography/issues..
        _`cryptography-dev`: https://mail.python.org/mailman/listinfo/cryptography-dev..
        _`security reporting`: https://cryptography.io/en/latest/security.html'
      Package: cryptography
      Source: pip
      Version: 41.0.3
      Hash: ''
      licenses:
      - Apache-2.0
      - BSD-3-Clause
      Title: cryptography
      DownloadURL: https://files.pythonhosted.org/packages/8e/5d/2bf54672898375d081cb24b30baeb7793568ae5d958ef781349e9635d1c8/cryptography-41.0.3.tar.gz
  bazaar:
    register: 'no'
    prim: 60/CAX1058294
    community_link: https://github.com/pyca/cryptography
    community_name: https://github.com/pyca/cryptography
    community_url: https://github.com/pyca/cryptography
    component_comment: ''
    component_highlevel_description: cryptography is a package which provides cryptographic
      recipes and primitives to Python developers. Our goal is for it to be your "cryptographic
      standard library". It supports Python 2.6 - 2.7, Python 3.3+, and PyPy 5.3+.
    component_name: cryptography
    component_platform: linux
    component_programing_language: Python
    component_version: 41.0.3
    licenses:
    - FAL1159003/2 (BSD 3-Clause (BSD-3-Clause))
    - FAL1159004/20 (Apache License 2.0 (Apache-2.0))
    - FAL1159998 (Dual License)
    src_download_link: https://github.com/pyca/cryptography/archive/41.0.3.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1056437&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: United States
    crypto: No Encryption
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: cryptography
    target_sw: linux
    vendor: pip
    version: 41.0.3
    web_url: https://github.com/pyca/cryptography
  licenses:
  - Apache-2.0
  - BSD-3-Clause
  name: cryptography
  primary:
  - this
  subcomponent: false
  type: FOSS
  versions:
  - 41.0.3
  mimer:
    linking: Static
    product_number: CAX1058294
    product_version_label: 41.0.3
    selected_licenses:
    - BSD-3-Clause
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'True'
- ID: Flask+2.2.5
  additional_info:
    fossa-attribution:
      Description: 'Flask=====Flask is a lightweight `WSGI`_ web application framework.
        It is designedto make getting started quick and easy, with the ability to
        scale up tocomplex applications. It began as a simple wrapper around `Werkzeug`_and
        `Jinja`_ and has become one of the most popular Python webapplication frameworks.Flask
        offers suggestions, but doesn''t enforce any dependencies orproject layout.
        It is up to the developer to choose the tools andlibraries they want to use.
        There are many extensions provided by thecommunity that make adding new functionality
        easy... _WSGI: https://wsgi.readthedocs.io/.. _Werkzeug: https://werkzeug.palletsprojects.com/..
        _Jinja: https://jinja.palletsprojects.com/Installing----------Install and
        update using `pip`_:.. code-block:: text    $ pip install -U Flask.. _pip:
        https://pip.pypa.io/en/stable/getting-started/A Simple Example----------------..
        code-block:: python    # save this as app.py    from flask import Flask    app
        = Flask(__name__)    @app.route("/")    def hello():        return "Hello,
        World!".. code-block:: text    $ flask run      * Running on http://127.0.0.1:5000/
        (Press CTRL+C to quit)Contributing------------For guidance on setting up a
        development environment and how to make acontribution to Flask, see the `contributing
        guidelines`_... _contributing guidelines: https://github.com/pallets/flask/blob/main/CONTRIBUTING.rstDonate------The
        Pallets organization develops and supports Flask and the librariesit uses.
        In order to grow the community of contributors and users, andallow the maintainers
        to devote more time to the projects, `pleasedonate today`_... _please donate
        today: https://palletsprojects.com/donateLinks------   Documentation: https://flask.palletsprojects.com/-   Changes:
        https://flask.palletsprojects.com/changes/-   PyPI Releases: https://pypi.org/project/Flask/-   Source
        Code: https://github.com/pallets/flask/-   Issue Tracker: https://github.com/pallets/flask/issues/-   Chat:
        https://discord.gg/pallets'
      Package: Flask
      Source: pip
      Version: 2.2.5
      Hash: ''
      licenses:
      - BSD-3-Clause
      - pallets-flask-logo
      Title: Flask
      DownloadURL: https://files.pythonhosted.org/packages/5f/76/a4d2c4436dda4b0a12c71e075c508ea7988a1066b06a575f6afe4fecc023/Flask-2.2.5.tar.gz
  bazaar:
    register: 'no'
    prim: 24/CAX1057042
    community_link: https://pypi.org/project/Flask/
    community_name: https://pypi.org/project/Flask/
    community_url: https://pypi.org/project/Flask/
    component_comment: ''
    component_highlevel_description: Flask is a microframework for Python based on
      Werkzeug, Jinja 2 and good intentions.
    component_name: Flask
    component_platform: linux
    component_programing_language: Python
    component_version: 2.2.5
    licenses:
    - FAL1159003/2 (BSD 3-Clause (BSD-3-Clause))
    src_download_link: https://files.pythonhosted.org/packages/5f/76/a4d2c4436dda4b0a12c71e075c508ea7988a1066b06a575f6afe4fecc023/Flask-2.2.5.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1045870&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: United States
    crypto: 'NO'
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: Flask
    target_sw: linux
    vendor: pip
    version: 2.2.5
    web_url: https://pypi.org/project/Flask/2.3.2/
  licenses:
  - BSD-3-Clause
  - pallets-flask-logo
  name: Flask
  primary:
  - this
  subcomponent: false
  type: FOSS
  versions:
  - 2.2.5
  mimer:
    linking: Static
    product_number: CAX1057042
    product_version_label: 2.2.5
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'True'
- ID: Flask-Cors+3.0.10
  additional_info:
    fossa-attribution:
      Description: 'Flask-CORS==========|Build Status| |Latest Version| |Supported
        Python versions||License|A Flask extension for handling Cross Origin Resource
        Sharing (CORS), making cross-origin AJAX possible.This package has a simple
        philosophy: when you want to enable CORS, you wish to enable it for all use
        cases on a domain. This means no mucking around with different allowed headers,
        methods, etc. By default, submission of cookies across domains is disabled
        due to the security implications. Please see the documentation for how to
        enable credential''ed requests, and please make sure you add some sort of
        `CSRF <http://en.wikipedia.org/wiki/Cross-site_request_forgery>`__ protection
        before doing so!Installation------------Install the extension with using pip,
        or easy\_install... code:: bash    $ pip install -U flask-corsUsage-----This
        package exposes a Flask extension which by default enables CORS support on
        all routes, for all origins and methods. It allows parameterization of all
        CORS headers on a per-resource level. The package also contains a decorator,
        for those who prefer this approach.Simple Usage~~~~~~~~~~~~In the simplest
        case, initialize the Flask-Cors extension with default arguments in order
        to allow CORS for all domains on all routes. See the full list of options
        in the `documentation <https://flask-cors.corydolphin.com/en/latest/api.html#extension>`__...
        code:: python    from flask import Flask    from flask_cors import CORS    app
        = Flask(__name__)    CORS(app)    @app.route("/")    def helloWorld():      return
        "Hello, cross-origin-world!"Resource specific CORS^^^^^^^^^^^^^^^^^^^^^^Alternatively,
        you can specify CORS options on a resource and origin level of granularity
        by passing a dictionary as the `resources` option, mapping paths to a set
        of options. See the full list of options in the `documentation <https://flask-cors.corydolphin.com/en/latest/api.html#extension>`__...
        code:: python    app = Flask(__name__)    cors = CORS(app, resources={r"/api/*":
        {"origins": "*"}})    @app.route("/api/v1/users")    def list_users():      return
        "user example"Route specific CORS via decorator^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^This
        extension also exposes a simple decorator to decorate flask routes with. Simply
        add ``@cross_origin()`` below a call to Flask''s ``@app.route(..)`` to allow
        CORS on a given route. See the full list of options in the `decorator documentation
        <https://flask-cors.corydolphin.com/en/latest/api.html#decorator>`__... code::
        python    @app.route("/")    @cross_origin()    def helloWorld():      return
        "Hello, cross-origin-world!"Documentation-------------For a full list of options,
        please see the full `documentation <https://flask-cors.corydolphin.com/en/latest/api.html>`__Troubleshooting---------------If
        things aren''t working as you expect, enable logging to help understand what
        is going on under the hood, and why... code:: python    logging.getLogger(''flask_cors'').level
        = logging.DEBUGTests-----A simple set of tests is included in ``test/``. To
        run, install nose, and simply invoke ``nosetests`` or ``python setup.py test``
        to exercise the tests.Contributing------------Questions, comments or improvements?
        Please create an issue on `Github <https://github.com/corydolphin/flask-cors>`__,
        tweet at `@corydolphin <https://twitter.com/corydolphin>`__ or send me an
        email. I do my best to include every contribution proposed in any way that
        I can.Credits-------This Flask extension is based upon the `Decorator for
        the HTTP Access Control <http://flask.pocoo.org/snippets/56/>`__ written by
        Armin Ronacher... |Build Status| image:: https://api.travis-ci.org/corydolphin/flask-cors.svg?branch=master   :target:
        https://travis-ci.org/corydolphin/flask-cors.. |Latest Version| image:: https://img.shields.io/pypi/v/Flask-Cors.svg   :target:
        https://pypi.python.org/pypi/Flask-Cors/.. |Supported Python versions| image::
        https://img.shields.io/pypi/pyversions/Flask-Cors.svg   :target: https://img.shields.io/pypi/pyversions/Flask-Cors.svg..
        |License| image:: http://img.shields.io/:license-mit-blue.svg   :target: https://pypi.python.org/pypi/Flask-Cors/'
      Package: Flask-Cors
      Source: pip
      Version: 3.0.10
      Hash: ''
      licenses:
      - MIT
      Title: Flask-Cors
      DownloadURL: https://files.pythonhosted.org/packages/cf/25/e3b2553d22ed542be807739556c69621ad2ab276ae8d5d2560f4ed20f652/Flask-Cors-3.0.10.tar.gz
  bazaar:
    register: 'no'
    prim: 7/CTX1023936
    community_link: https://github.com/corydolphin/flask-cors
    community_name: https://github.com/corydolphin/flask-cors
    community_url: https://github.com/corydolphin/flask-cors
    component_comment: ''
    component_highlevel_description: A Flask extension for handling Cross Origin Resource
      Sharing (CORS), making cross-origin AJAX possible.
    component_name: Flask-CORS
    component_platform: linux
    component_programing_language: Python
    component_version: 3.0.10
    licenses:
    - FAL1159008 (MIT License (MIT))
    src_download_link: https://github.com/corydolphin/flask-cors/archive/3.0.10.zip
    stako_decision_reason: allowed
    stako: ESW3
    stako_comment: Product version is older than 18 months
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=951413&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: United States
    crypto: No Encryption
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: Flask-Cors
    target_sw: linux
    vendor: pip
    version: 3.0.10
    web_url: https://github.com/corydolphin/flask-cors
  licenses:
  - MIT
  name: Flask-Cors
  primary:
  - this
  subcomponent: false
  type: FOSS
  versions:
  - 3.0.10
  mimer:
    linking: Static
    product_number: CTX1023936
    product_version_label: 3.0.10
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'True'
  alerts:
  - '''Flask-CORS'': Manual set stako_decision_reason: ''allowed'' for stako: ''ESW3'',
    team takes the risk!'
  - '''951413'': Manual set stako_decision_reason: ''allowed'' for stako: ''ESW3'',
    team takes the risk!'
- ID: Flask-OpenTracing+1.1.0
  additional_info:
    fossa-attribution:
      Description: '#################Flask-OpenTracing#################This package
        enables distributed tracing in Flask applications via `The OpenTracing Project`_.
        Once a production system contends with real concurrency or splits into many
        services, crucial (and formerly easy) tasks become difficult: user-facing
        latency optimization, root-cause analysis of backend errors, communication
        about distinct pieces of a now-distributed system, etc. Distributed tracing
        follows a request on its journey from inception to completion from mobile/browser
        all the way to the microservices. As core services and libraries adopt OpenTracing,
        the application builder is no longer burdened with the task of adding basic
        tracing instrumentation to their own code. In this way, developers can build
        their applications with the tools they prefer and benefit from built-in tracing
        instrumentation. OpenTracing implementations exist for major distributed tracing
        systems and can be bound or swapped with a one-line configuration change.If
        you want to learn more about the underlying python API, visit the python `source
        code`_.If you are migrating from the 0.x series, you may want to read the
        list of `breaking changes`_... _The OpenTracing Project: http://opentracing.io/..
        _source code: https://github.com/opentracing/opentracing-python.. _breaking
        changes: #breaking-changes-from-0-xInstallation============Run the following
        command:.. code-block::     $ pip install Flask-OpentracingUsage=====This
        Flask extension allows for tracing of Flask apps using the OpenTracing API.
        Allthat it requires is for a ``FlaskTracing`` tracer to be initialized using
        aninstance of an OpenTracing tracer. You can either trace all requests to
        your site, or use function decorators to trace certain individual requests.**Note:**
        `optional_args` in both cases are any number of attributes (as strings) of
        `flask.Request` that you wish to set as tags on the created spanInitialize----------`FlaskTracing`
        wraps the tracer instance that''s supported by opentracing. To create a `FlaskTracing`
        object, you can either pass in a tracer object directly or a callable that
        returns the tracer object. For example:.. code-block:: python    import opentracing    from
        flask_opentracing import FlaskTracing    opentracing_tracer = ## some OpenTracing
        tracer implementation    tracing = FlaskTracing(opentracing_tracer, ...)or..
        code-block:: python    import opentracing    from flask_opentracing import
        FlaskTracing    def initialize_tracer():        ...        return opentracing_tracer    tracing
        = FlaskTracing(initialize_tracer, ...)Trace All Requests------------------..
        code-block:: python    import opentracing    from flask_opentracing import
        FlaskTracing    app = Flask(__name__)    opentracing_tracer = ## some OpenTracing
        tracer implementation    tracing = FlaskTracing(opentracing_tracer, True,
        app, [optional_args])Trace Individual Requests-------------------------..
        code-block:: python    import opentracing    from flask_opentracing import
        FlaskTracing    app = Flask(__name__)    opentracing_tracer = ## some OpenTracing
        tracer implementation      tracing = FlaskTracing(opentracing_tracer)    @app.route(''/some_url'')    @tracing.trace(optional_args)    def
        some_view_func():    ...         return some_view Accessing Spans Manually------------------------In
        order to access the span for a request, we''ve provided an method `FlaskTracing.get_span(request)`
        that returns the span for the request, if it is exists and is not finished.
        This can be used to log important events to the span, set tags, or create
        child spans to trace non-RPC events. If no request is passed in, the current
        request will be used.Tracing an RPC--------------If you want to make an RPC
        and continue an existing trace, you can inject the current span into the RPC.
        For example, if making an http request, the following code will continue your
        trace across the wire:.. code-block:: python    @tracing.trace()    def some_view_func(request):        new_request
        = some_http_request        current_span = tracing.get_span(request)        text_carrier
        = {}        opentracing_tracer.inject(span, opentracing.Format.TEXT_MAP, text_carrier)        for
        k, v in text_carrier.iteritems():            new_request.add_header(k,v)        ...
        # make requestExamples========See `examples`_ to view and run an example of
        two Flask applicationswith integrated OpenTracing tracers... _examples: https://github.com/opentracing-contrib/python-flask/tree/master/example`This
        tutorial <http://blog.scoutapp.com/articles/2018/01/15/tutorial-tracing-python-flask-requests-with-opentracing>`_
        has a step-by-step guide for using `Flask-Opentracing` with `Jaeger <https://github.com/jaegertracing/jaeger>`_.Breaking
        changes from 0.x=========================Starting with the 1.0 version, a
        few changes have taken place from previous versions:* ``FlaskTracer`` has
        been renamed to ``FlaskTracing``, although ``FlaskTracing``  can be used still
        as a deprecated name.* When passing an ``Application`` object at ``FlaskTracing``
        creation time,  ``trace_all_requests`` defaults to ``True``.* When no ``opentracing.Tracer``
        is provided, ``FlaskTracing`` will rely on the  global tracer.Further Information===================If
        you''re interested in learning more about the OpenTracing standard, please
        visit `opentracing.io`_ or `join the mailing list`_. If you would like to
        implement OpenTracing in your project and need help, feel free to send us
        a note at `community@opentracing.io`_... _opentracing.io: http://opentracing.io/..
        _join the mailing list: http://opentracing.us13.list-manage.com/subscribe?u=180afe03860541dae59e84153&id=19117aa6cd..
        _community@opentracing.io: community@opentracing.io'
      Package: Flask-OpenTracing
      Source: pip
      Version: 1.1.0
      Hash: ''
      licenses:
      - BSD-3-Clause
      Title: Flask-OpenTracing
      DownloadURL: https://files.pythonhosted.org/packages/58/6c/6417701ba5ecc8854670c6db3207bcc3e5fbc96289a7cb18d5516d99a1c6/Flask-OpenTracing-1.1.0.tar.gz
  bazaar:
    register: 'no'
    prim: 1/CTX1030297
    community_link: https://github.com/opentracing-contrib/python-flask/
    community_name: https://github.com/opentracing-contrib/python-flask/
    community_url: https://github.com/opentracing-contrib/python-flask/
    component_comment: ''
    component_highlevel_description: OpenTracing instrumentation for the Flask microframework
    component_name: Flask-OpenTracing
    component_platform: linux
    component_programing_language: Python
    component_version: 1.1.0
    licenses:
    - FAL1159003/2 (BSD 3-Clause (BSD-3-Clause))
    src_download_link: https://github.com/opentracing-contrib/python-flask/archive/1.1.0.zip
    stako_decision_reason: allowed
    stako: ESW3
    stako_comment: Product version is older than 18 months
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=947924&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: United States
    crypto: No Encryption
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: Flask-OpenTracing
    target_sw: linux
    vendor: pip
    version: 1.1.0
    web_url: http://github.com/opentracing-contrib/python-flask
  licenses:
  - BSD-3-Clause
  name: Flask-OpenTracing
  primary:
  - this
  subcomponent: false
  type: FOSS
  versions:
  - 1.1.0
  mimer:
    linking: Static
    product_number: CTX1030297
    product_version_label: 1.1.0
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'True'
  alerts:
  - '''947924'': Manual set stako_decision_reason: ''allowed'' for stako: ''ESW3'',
    team takes the risk!'
  - '''Flask-OpenTracing'': Manual set stako_decision_reason: ''allowed'' for stako:
    ''ESW3'', team takes the risk!'
- ID: grpcio+1.57.0
  additional_info:
    fossa-attribution:
      Description: 'gRPC Python===========|compat_check_pypi|Package for gRPC Python...
        |compat_check_pypi| image:: https://python-compatibility-tools.appspot.com/one_badge_image?package=grpcio   :target:
        https://python-compatibility-tools.appspot.com/one_badge_target?package=grpcioSupported
        Python Versions-------------------------Python >= 3.7Installation------------gRPC
        Python is available for Linux, macOS, and Windows.Installing From PyPI~~~~~~~~~~~~~~~~~~~~If
        you are installing locally...::  $ pip install grpcioElse system wide (on
        Ubuntu)...::  $ sudo pip install grpcioIf you''re on Windows make sure that
        you installed the :code:`pip.exe` componentwhen you installed Python (if not
        go back and install it!) then invoke:::  $ pip.exe install grpcioWindows users
        may need to invoke :code:`pip.exe` from a command line ran asadministrator.n.b.
        On Windows and on Mac OS X one *must* have a recent release of :code:`pip`to
        retrieve the proper wheel from PyPI. Be sure to upgrade to the latestversion!Installing
        From Source~~~~~~~~~~~~~~~~~~~~~~Building from source requires that you have
        the Python headers (usually apackage named :code:`python-dev`).::  $ export
        REPO_ROOT=grpc  # REPO_ROOT can be any directory of your choice  $ git clone
        -b RELEASE_TAG_HERE https://github.com/grpc/grpc $REPO_ROOT  $ cd $REPO_ROOT  $
        git submodule update --init  # For the next two commands do `sudo pip install`
        if you get permission-denied errors  $ pip install -rrequirements.txt  $ GRPC_PYTHON_BUILD_WITH_CYTHON=1
        pip install .You cannot currently install Python from source on Windows. Things
        might workout for you in MSYS2 (follow the Linux instructions), but it isn''t
        officiallysupported at the moment.Troubleshooting~~~~~~~~~~~~~~~Help, I ...*
        **... see a** :code:`pkg_resources.VersionConflict` **when I try to install  grpc**  This
        is likely because :code:`pip` doesn''t own the offending dependency,  which
        in turn is likely because your operating system''s package manager owns  it.
        You''ll need to force the installation of the dependency:  :code:`pip install
        --ignore-installed $OFFENDING_DEPENDENCY`  For example, if you get an error
        like the following:  ::    Traceback (most recent call last):    File "<string>",
        line 17, in <module>     ...    File "/usr/lib/python2.7/dist-packages/pkg_resources.py",
        line 509, in find      raise VersionConflict(dist, req)    pkg_resources.VersionConflict:
        (six 1.8.0 (/usr/lib/python2.7/dist-packages), Requirement.parse(''six>=1.10''))  You
        can fix it by doing:  ::    sudo pip install --ignore-installed six* **...
        see the following error on some platforms**  ::    /tmp/pip-build-U8pSsr/cython/Cython/Plex/Scanners.c:4:20:
        fatal error: Python.h: No such file or directory    #include "Python.h"                    ^    compilation
        terminated.  You can fix it by installing `python-dev` package. i.e  ::    sudo
        apt-get install python-dev'
      Package: grpcio
      Source: pip
      Version: 1.57.0
      Hash: ''
      licenses:
      - Apache-2.0
      - BSD-2-Clause
      - BSD-3-Clause
      - GPL-1.0-or-later
      - GPL-2.0-only
      - ISC
      - Info-ZIP
      - MIT
      - MPL-2.0
      - OpenSSL
      - Zlib
      - apache-2.0 WITH llvm-exception
      - mit-old-style
      - mit-old-style-no-advert
      - openssl-nokia-psk-contribution
      - openssl-ssleay
      Title: grpcio
      DownloadURL: https://files.pythonhosted.org/packages/18/b5/3ebe1bd133f472640e2d8941d2208b8de63706ebc08b09e1bb988d7f0071/grpcio-1.57.0.tar.gz
  bazaar:
    register: 'no'
    prim: 7/CTX1034461
    community_link: https://pypi.org/project/grpcio
    community_name: https://pypi.org/project/grpcio
    community_url: https://pypi.org/project/grpcio
    component_comment: ''
    component_highlevel_description: Package for gRPC Python.
    component_name: grpcio
    component_platform: linux
    component_programing_language: Python
    component_version: 1.57.0
    licenses:
    - FAL1159004/20 (Apache License 2.0 (Apache-2.0))
    src_download_link: https://files.pythonhosted.org/packages/18/b5/3ebe1bd133f472640e2d8941d2208b8de63706ebc08b09e1bb988d7f0071/grpcio-1.57.0.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1057140&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: United States
    crypto: No Encryption
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: grpcio
    target_sw: linux
    vendor: pip
    version: 1.57.0
    web_url: https://grpc.io
  licenses:
  - Apache-2.0
  - BSD-2-Clause
  - BSD-3-Clause
  - GPL-1.0-or-later
  - GPL-2.0-only
  - ISC
  - Info-ZIP
  - MIT
  - MPL-2.0
  - OpenSSL
  - Zlib
  - apache-2.0 WITH llvm-exception
  - mit-old-style
  - mit-old-style-no-advert
  - openssl-nokia-psk-contribution
  - openssl-ssleay
  name: grpcio
  primary:
  - this
  subcomponent: false
  type: FOSS
  versions:
  - 1.57.0
  mimer:
    linking: Static
    product_number: CTX1034461
    product_version_label: 1.57.0
    selected_licenses:
    - Apache-2.0
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'True'
- ID: grpcio-opentracing+1.1.4
  additional_info:
    fossa-attribution:
      Description: The fossa information is fetched from  FOSSA service. Don't Edit!
      Package: grpcio-opentracing
      Source: pip
      Version: 1.1.4
      Hash: ''
      licenses:
      - Apache-2.0
      Title: grpcio-opentracing
      DownloadURL: https://files.pythonhosted.org/packages/db/82/2fcad380697c3dab25de76ee590bcab3eb9bbfb4add916044d7e83ec2b10/grpcio_opentracing-1.1.4-py3-none-any.whl
  bazaar:
    register: 'no'
    prim: 1/CTX1034745
    community_link: https://pypi.org/project/grpcio-opentracing/
    community_name: https://pypi.org/project/grpcio-opentracing/
    community_url: https://pypi.org/project/grpcio-opentracing/
    component_comment: ''
    component_highlevel_description: "The `grpcio-opentracing` package makes it easy
      to add OpenTracing support to \ngRPC-based systems in Python"
    component_name: grpcio-opentracing
    component_platform: linux
    component_programing_language: Python
    component_version: 1.1.4
    licenses:
    - FAL1159003/2 (BSD 3-Clause (BSD-3-Clause))
    src_download_link: https://files.pythonhosted.org/packages/c0/64/eef79e29e0479fdd43df4d5c8c5b9124f143a8701985907383b1d11cf6fb/grpcio-opentracing-1.1.4.tar.gz
    stako_decision_reason: allowed
    stako: ESW4
    stako_comment: Product version is older than 54 months
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1006509&id-filter=equals&rowDisplay=Card-Simple
    recode: RE1
    retext: PRODUCT VERSION IS OLDER THAN 54 MONTHS
    country: United States
    crypto: No Encryption
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: grpcio-opentracing
    target_sw: linux
    vendor: pip
    version: 1.1.4
    web_url: https://pypi.org/project/grpcio-opentracing/1.1.4/
  licenses:
  - Apache-2.0
  - BSD-3-Clause
  name: grpcio-opentracing
  primary:
  - this
  selected_licenses:
  - BSD-3-Clause
  subcomponent: false
  type: FOSS
  versions:
  - 1.1.4
  mimer:
    linking: Static
    product_number: CTX1034745
    product_version_label: 1.1.4
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'True'
    selected_licenses:
    - Apache-2.0
  alerts:
  - Stako is 'ESW4', BAZAAR/SCAS component is not recommended to be used
- ID: grpcio-reflection+1.48.2
  additional_info:
    fossa-attribution:
      Description: gRPC Python Reflection package==============================Reference
        package for reflection in GRPC Python.Supported Python Versions-------------------------Python
        >= 3.7Dependencies------------Depends on the `grpcio` package, available from
        PyPI via `pip install grpcio`.
      Package: grpcio-reflection
      Source: pip
      Version: 1.48.2
      Hash: ''
      licenses:
      - Apache-2.0
      - BSD-3-Clause
      - MPL-2.0
      Title: grpcio-reflection
      DownloadURL: https://files.pythonhosted.org/packages/2c/ac/2aac57d4c40319b4ad8d947aa54832297781f06cb3965ee6099133c3fd18/grpcio-reflection-1.48.2.tar.gz
  bazaar:
    register: 'no'
    prim: 66/CAX1059394
    community_link: https://github.com/grpc/grpc
    community_name: https://github.com/grpc/grpc
    community_url: https://github.com/grpc/grpc
    component_comment: ''
    component_highlevel_description: gRPC is a modern, open source, high-performance
      remote procedure call (RPC) framework that can run anywhere. gRPC enables client
      and server applications to communicate transparently, and simplifies the building
      of connected systems.
    component_name: grpc
    component_platform: linux
    component_programing_language: C++
    component_version: 1.48.2
    licenses:
    - FAL1159003/2 (BSD 3-Clause (BSD-3-Clause))
    - FAL1159004/20 (Apache License 2.0 (Apache-2.0))
    src_download_link: https://github.com/grpc/grpc/archive/v1.48.2.tar.gz
    stako_decision_reason: allowed
    stako: ESW3
    stako_comment: Newer versions exists
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1029684&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: United States
    crypto: N/A
    programming_language: C++
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: grpcio-reflection
    target_sw: linux
    vendor: pip
    version: 1.48.2
    web_url: https://grpc.io
  licenses:
  - Apache-2.0
  - BSD-3-Clause
  - MPL-2.0
  name: grpcio-reflection
  primary:
  - this
  subcomponent: false
  type: FOSS
  versions:
  - 1.48.2
  mimer:
    linking: Static
    product_number: CAX1059394
    product_version_label: v1.48.2
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'True'
  alerts:
  - '''grpc'': Manual set stako_decision_reason: ''allowed'' for stako: ''ESW3'',
    team takes the risk!'
  - '''1029684'': Manual set stako_decision_reason: ''allowed'' for stako: ''ESW3'',
    team takes the risk!'
- ID: gunicorn+20.1.0
  additional_info:
    fossa-attribution:
      Description: 'Gunicorn--------.. image:: https://img.shields.io/pypi/v/gunicorn.svg?style=flat    :alt:
        PyPI version    :target: https://pypi.python.org/pypi/gunicorn.. image:: https://img.shields.io/pypi/pyversions/gunicorn.svg    :alt:
        Supported Python versions    :target: https://pypi.python.org/pypi/gunicorn..
        image:: https://github.com/benoitc/gunicorn/actions/workflows/tox.yml/badge.svg    :alt:
        Build Status    :target: https://github.com/benoitc/gunicorn/actions/workflows/tox.yml..
        image:: https://github.com/benoitc/gunicorn/actions/workflows/lint.yml/badge.svg    :alt:
        Lint Status    :target: https://github.com/benoitc/gunicorn/actions/workflows/lint.ymlGunicorn
        ''Green Unicorn'' is a Python WSGI HTTP Server for UNIX. It''s a pre-forkworker
        model ported from Ruby''s Unicorn_ project. The Gunicorn server is broadlycompatible
        with various web frameworks, simply implemented, light on serverresource usage,
        and fairly speedy.Feel free to join us in `#gunicorn`_ on `Libera.chat`_.Documentation-------------The
        documentation is hosted at https://docs.gunicorn.org.Installation------------Gunicorn
        requires **Python 3.x >= 3.5**.Install from PyPI::    $ pip install gunicornUsage-----Basic
        usage::    $ gunicorn [OPTIONS] APP_MODULEWhere ``APP_MODULE`` is of the pattern
        ``$(MODULE_NAME):$(VARIABLE_NAME)``. Themodule name can be a full dotted path.
        The variable name refers to a WSGIcallable that should be found in the specified
        module.Example with test app::    $ cd examples    $ gunicorn --workers=2
        test:appContributing------------See `our complete contributor''s guide <CONTRIBUTING.md>`_
        for more details.License-------Gunicorn is released under the MIT License.
        See the LICENSE_ file for moredetails... _Unicorn: https://bogomips.org/unicorn/..
        _`#gunicorn`: https://web.libera.chat/?channels=#gunicorn.. _`Libera.chat`:
        https://libera.chat/.. _LICENSE: https://github.com/benoitc/gunicorn/blob/master/LICENSE'
      Package: gunicorn
      Source: pip
      Version: 20.1.0
      Hash: ''
      licenses:
      - HPND
      - MIT
      Title: gunicorn
      DownloadURL: https://files.pythonhosted.org/packages/e4/dd/5b190393e6066286773a67dfcc2f9492058e9b57c4867a95f1ba5caf0a83/gunicorn-20.1.0-py3-none-any.whl
  bazaar:
    register: 'no'
    prim: 8/CAX1057411
    community_link: https://github.com/benoitc/gunicorn
    community_name: https://github.com/benoitc/gunicorn
    community_url: https://github.com/benoitc/gunicorn
    component_comment: ''
    component_highlevel_description: Gunicorn 'Green Unicorn' is a Python WSGI HTTP
      Server for UNIX. It's a pre-fork worker model ported from Ruby's Unicorn project.
    component_name: Gunicorn
    component_platform: linux
    component_programing_language: Python
    component_version: 20.1.0
    licenses:
    - FAL1159008 (MIT License (MIT))
    src_download_link: https://github.com/benoitc/gunicorn/archive/20.1.0.tar.gz
    stako_decision_reason: allowed
    stako: ESW3
    stako_comment: Product version is older than 18 months
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=969852&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: France
    crypto: No Encryption
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: gunicorn
    target_sw: linux
    vendor: pip
    version: 20.1.0
    web_url: https://gunicorn.org
  licenses:
  - HPND
  - MIT
  name: gunicorn
  primary:
  - this
  subcomponent: false
  type: FOSS
  versions:
  - 20.1.0
  mimer:
    linking: Static
    product_number: CAX1057411
    product_version_label: 20.1.0
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'True'
    selected_licenses:
    - MIT
  alerts:
  - '''969852'': Manual set stako_decision_reason: ''allowed'' for stako: ''ESW3'',
    team takes the risk!'
  - '''Gunicorn'': Manual set stako_decision_reason: ''allowed'' for stako: ''ESW3'',
    team takes the risk!'
- ID: idna+3.4
  additional_info:
    fossa-attribution:
      Description: "Internationalized Domain Names in Applications (IDNA)=====================================================Support
        for the Internationalized Domain Names inApplications (IDNA) protocol as specified
        in `RFC 5891<https://tools.ietf.org/html/rfc5891>`_. This is the latest version
        ofthe protocol and is sometimes referred to as \u201CIDNA 2008\u201D.This
        library also provides support for Unicode TechnicalStandard 46, `Unicode IDNA
        Compatibility Processing<https://unicode.org/reports/tr46/>`_.This acts as
        a suitable replacement for the \u201Cencodings.idna\u201Dmodule that comes
        with the Python standard library, but whichonly supports the older superseded
        IDNA specification (`RFC 3490<https://tools.ietf.org/html/rfc3490>`_).Basic
        functions are simply executed:.. code-block:: pycon    >>> import idna    >>>
        idna.encode('\u30C9\u30E1\u30A4\u30F3.\u30C6\u30B9\u30C8')    b'xn--eckwd4c7c.xn--zckzah'
        \   >>> print(idna.decode('xn--eckwd4c7c.xn--zckzah'))    \u30C9\u30E1\u30A4\u30F3.\u30C6\u30B9\u30C8Installation------------This
        package is available for installation from PyPI:.. code-block:: bash    $
        python3 -m pip install idnaUsage-----For typical usage, the ``encode`` and
        ``decode`` functions will take adomain name argument and perform a conversion
        to A-labels or U-labelsrespectively... code-block:: pycon    >>> import idna
        \   >>> idna.encode('\u30C9\u30E1\u30A4\u30F3.\u30C6\u30B9\u30C8')    b'xn--eckwd4c7c.xn--zckzah'
        \   >>> print(idna.decode('xn--eckwd4c7c.xn--zckzah'))    \u30C9\u30E1\u30A4\u30F3.\u30C6\u30B9\u30C8You
        may use the codec encoding and decoding methods using the``idna.codec`` module:..
        code-block:: pycon    >>> import idna.codec    >>> print('\u0434\u043E\u043C\u0435\u043D.\u0438\u0441\u043F\u044B\u0442\u0430\u043D\u0438\u0435'.encode('idna'))
        \   b'xn--d1acufc.xn--80akhbyknj4f'    >>> print(b'xn--d1acufc.xn--80akhbyknj4f'.decode('idna'))
        \   \u0434\u043E\u043C\u0435\u043D.\u0438\u0441\u043F\u044B\u0442\u0430\u043D\u0438\u0435Conversions
        can be applied at a per-label basis using the ``ulabel`` or``alabel`` functions
        if necessary:.. code-block:: pycon    >>> idna.alabel('\u6D4B\u8BD5')    b'xn--0zwm56d'Compatibility
        Mapping (UTS #46)+++++++++++++++++++++++++++++++As described in `RFC 5895
        <https://tools.ietf.org/html/rfc5895>`_, theIDNA specification does not normalize
        input from different potentialways a user may input a domain name. This functionality,
        known asa \u201Cmapping\u201D, is considered by the specification to be a
        localuser-interface issue distinct from IDNA conversion functionality.This
        library provides one such mapping, that was developed by theUnicode Consortium.
        Known as `Unicode IDNA Compatibility Processing<https://unicode.org/reports/tr46/>`_,
        it provides for both a regularmapping for typical applications, as well as
        a transitional mapping tohelp migrate from older IDNA 2003 applications.For
        example, \u201CK\xF6nigsg\xE4\xDFchen\u201D is not a permissible label as
        *LATINCAPITAL LETTER K* is not allowed (nor are capital letters in general).UTS
        46 will convert this into lower case prior to applying the IDNAconversion...
        code-block:: pycon    >>> import idna    >>> idna.encode('K\xF6nigsg\xE4\xDFchen')
        \   ...    idna.core.InvalidCodepoint: Codepoint U+004B at position 1 of 'K\xF6nigsg\xE4\xDFchen'
        not allowed    >>> idna.encode('K\xF6nigsg\xE4\xDFchen', uts46=True)    b'xn--knigsgchen-b4a3dun'
        \   >>> print(idna.decode('xn--knigsgchen-b4a3dun'))    k\xF6nigsg\xE4\xDFchenTransitional
        processing provides conversions to help transition fromthe older 2003 standard
        to the current standard. For example, in theoriginal IDNA specification, the
        *LATIN SMALL LETTER SHARP S* (\xDF) wasconverted into two *LATIN SMALL LETTER
        S* (ss), whereas in the currentIDNA specification this conversion is not performed...
        code-block:: pycon    >>> idna.encode('K\xF6nigsg\xE4\xDFchen', uts46=True,
        transitional=True)    'xn--knigsgsschen-lcb0w'Implementors should use transitional
        processing with caution, only inrare cases where conversion from legacy labels
        to current labels must beperformed (i.e. IDNA implementations that pre-date
        2008). For typicalapplications that just need to convert labels, transitional
        processingis unlikely to be beneficial and could produce unexpected incompatibleresults.``encodings.idna``
        Compatibility++++++++++++++++++++++++++++++++Function calls from the Python
        built-in ``encodings.idna`` module aremapped to their IDNA 2008 equivalents
        using the ``idna.compat`` module.Simply substitute the ``import`` clause in
        your code to refer to the newmodule name.Exceptions----------All errors raised
        during the conversion following the specificationshould raise an exception
        derived from the ``idna.IDNAError`` baseclass.More specific exceptions that
        may be generated as ``idna.IDNABidiError``when the error reflects an illegal
        combination of left-to-right andright-to-left characters in a label; ``idna.InvalidCodepoint``
        whena specific codepoint is an illegal character in an IDN label (i.e.INVALID);
        and ``idna.InvalidCodepointContext`` when the codepoint isillegal based on
        its positional context (i.e. it is CONTEXTO or CONTEXTJbut the contextual
        requirements are not satisfied.)Building and Diagnostics------------------------The
        IDNA and UTS 46 functionality relies upon pre-calculated lookuptables for
        performance. These tables are derived from computing againsteligibility criteria
        in the respective standards. These tables arecomputed using the command-line
        script ``tools/idna-data``.This tool will fetch relevant codepoint data from
        the Unicode repositoryand perform the required calculations to identify eligibility.
        There arethree main modes:* ``idna-data make-libdata``. Generates ``idnadata.py``
        and  ``uts46data.py``, the pre-calculated lookup tables using for IDNA and
        \ UTS 46 conversions. Implementors who wish to track this library against
        \ a different Unicode version may use this tool to manually generate a  different
        version of the ``idnadata.py`` and ``uts46data.py`` files.* ``idna-data make-table``.
        Generate a table of the IDNA disposition  (e.g. PVALID, CONTEXTJ, CONTEXTO)
        in the format found in Appendix  B.1 of RFC 5892 and the pre-computed tables
        published by `IANA  <https://www.iana.org/>`_.* ``idna-data U+0061``. Prints
        debugging output on the various  properties associated with an individual
        Unicode codepoint (in this  case, U+0061), that are used to assess the IDNA
        and UTS 46 status of a  codepoint. This is helpful in debugging or analysis.The
        tool accepts a number of arguments, described using ``idna-data-h``. Most
        notably, the ``--version`` argument allows the specificationof the version
        of Unicode to use in computing the table data. Forexample, ``idna-data --version
        9.0.0 make-libdata`` will generatelibrary data against Unicode 9.0.0.Additional
        Notes----------------* **Packages**. The latest tagged release version is
        published in the  `Python Package Index <https://pypi.org/project/idna/>`_.*
        **Version support**. This library supports Python 3.5 and higher.  As this
        library serves as a low-level toolkit for a variety of  applications, many
        of which strive for broad compatibility with older  Python versions, there
        is no rush to remove older intepreter support.  Removing support for older
        versions should be well justified in that the  maintenance burden has become
        too high.* **Python 2**. Python 2 is supported by version 2.x of this library.
        \ While active development of the version 2.x series has ended, notable  issues
        being corrected may be backported to 2.x. Use \"idna<3\" in your  requirements
        file if you need this library for a Python 2 application.* **Testing**. The
        library has a test suite based on each rule of the  IDNA specification, as
        well as tests that are provided as part of the  Unicode Technical Standard
        46, `Unicode IDNA Compatibility Processing  <https://unicode.org/reports/tr46/>`_.*
        **Emoji**. It is an occasional request to support emoji domains in  this library.
        Encoding of symbols like emoji is expressly prohibited by  the technical standard
        IDNA 2008 and emoji domains are broadly phased  out across the domain industry
        due to associated security risks. For  now, applications that wish need to
        support these non-compliant labels  may wish to consider trying the encode/decode
        operation in this library  first, and then falling back to using `encodings.idna`.
        See `the Github  project <https://github.com/kjd/idna/issues/18>`_ for more
        discussion."
      Package: idna
      Source: pip
      Version: '3.4'
      Hash: ''
      licenses:
      - BSD-3-Clause
      Title: idna
      DownloadURL: https://files.pythonhosted.org/packages/fc/34/3030de6f1370931b9dbb4dad48f6ab1015ab1d32447850b9fc94e60097be/idna-3.4-py3-none-any.whl
  bazaar:
    register: 'no'
    prim: 13/CAX1058316
    community_link: https://github.com/kjd/idna
    community_name: https://github.com/kjd/idna
    community_url: https://github.com/kjd/idna
    component_comment: ''
    component_highlevel_description: "Support for the Internationalised Domain Names
      in Applications (IDNA) protocol as specified in RFC 5891. This is the latest
      version of the protocol and is sometimes referred to as \u201CIDNA 2008\u201D.\nThis
      library also provides support for Unicode Technical Standard 46, Unicode IDNA
      Compatibility Processing.\nThis acts as a suitable replacement for the \u201Cencodings.idna\u201D
      module that comes with the Python standard library, but which only supports
      the old, deprecated IDNA specification (RFC 3490)."
    component_name: idna, Python
    component_platform: linux
    component_programing_language: Python
    component_version: '3.4'
    licenses:
    - FAL1159003/2 (BSD 3-Clause (BSD-3-Clause))
    src_download_link: https://github.com/kjd/idna/archive/v3.4.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1024073&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: United States
    crypto: No Encryption
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: idna
    target_sw: linux
    vendor: pip
    version: '3.4'
    web_url: https://pypi.org/project/idna/3.4/
  licenses:
  - BSD-3-Clause
  name: idna
  primary:
  - this
  subcomponent: false
  type: FOSS
  versions:
  - '3.4'
  mimer:
    linking: Static
    product_number: CAX1058316
    product_version_label: '3.4'
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'True'
- ID: itsdangerous+2.1.2
  additional_info:
    fossa-attribution:
      Description: 'ItsDangerous============... so better sign thisVarious helpers
        to pass data to untrusted environments and to get itback safe and sound. Data
        is cryptographically signed to ensure that atoken has not been tampered with.It''s
        possible to customize how data is serialized. Data is compressed asneeded.
        A timestamp can be added and verified automatically whileloading a token.Installing----------Install
        and update using `pip`_:.. code-block:: text    pip install -U itsdangerous..
        _pip: https://pip.pypa.io/en/stable/getting-started/A Simple Example----------------Here''s
        how you could generate a token for transmitting a user''s id andname between
        web requests... code-block:: python    from itsdangerous import URLSafeSerializer    auth_s
        = URLSafeSerializer("secret key", "auth")    token = auth_s.dumps({"id": 5,
        "name": "itsdangerous"})    print(token)    # eyJpZCI6NSwibmFtZSI6Iml0c2Rhbmdlcm91cyJ9.6YP6T0BaO67XP--9UzTrmurXSmg    data
        = auth_s.loads(token)    print(data["name"])    # itsdangerousDonate------The
        Pallets organization develops and supports ItsDangerous and otherpopular packages.
        In order to grow the community of contributors andusers, and allow the maintainers
        to devote more time to the projects,`please donate today`_... _please donate
        today: https://palletsprojects.com/donateLinks------   Documentation: https://itsdangerous.palletsprojects.com/-   Changes:
        https://itsdangerous.palletsprojects.com/changes/-   PyPI Releases: https://pypi.org/project/ItsDangerous/-   Source
        Code: https://github.com/pallets/itsdangerous/-   Issue Tracker: https://github.com/pallets/itsdangerous/issues/-   Website:
        https://palletsprojects.com/p/itsdangerous/-   Twitter: https://twitter.com/PalletsTeam-   Chat:
        https://discord.gg/pallets'
      Package: itsdangerous
      Source: pip
      Version: 2.1.2
      Hash: ''
      licenses:
      - BSD-3-Clause
      - ISC
      Title: itsdangerous
      DownloadURL: https://files.pythonhosted.org/packages/7f/a1/d3fb83e7a61fa0c0d3d08ad0a94ddbeff3731c05212617dff3a94e097f08/itsdangerous-2.1.2.tar.gz
  bazaar:
    register: 'no'
    prim: 8/CAX1057041
    community_link: https://github.com/pallets/itsdangerous
    community_name: https://github.com/pallets/itsdangerous
    community_url: https://github.com/pallets/itsdangerous
    component_comment: ''
    component_highlevel_description: 'Various helpers to pass data to untrusted environments
      and to get it back safe and sound.

      This repository provides a module that is a port of the django signing module.  It''s
      not directly copied but some changes were applied to make it work better on
      its own.'
    component_name: itsdangerous, Python
    component_platform: linux
    component_programing_language: Python
    component_version: 2.1.2
    licenses:
    - FAL1159003/2 (BSD 3-Clause (BSD-3-Clause))
    src_download_link: https://github.com/pallets/itsdangerous/archive/2.1.2.tar.gz
    stako_decision_reason: allowed
    stako: ESW3
    stako_comment: Product version is older than 18 months
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1007918&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: Austria
    crypto: N/A
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: itsdangerous
    target_sw: linux
    vendor: pip
    version: 2.1.2
    web_url: https://palletsprojects.com/p/itsdangerous/
  licenses:
  - BSD-3-Clause
  - ISC
  name: itsdangerous
  primary:
  - this
  subcomponent: false
  type: FOSS
  versions:
  - 2.1.2
  mimer:
    linking: Static
    product_number: CAX1057041
    product_version_label: 2.1.2
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'True'
  alerts:
  - Stako is 'ESW3', BAZAAR/SCAS component is not recommended to be used
- ID: jaeger-client+4.4.0
  additional_info:
    fossa-attribution:
      Description: The fossa information is fetched from  FOSSA service. Don't Edit!
      Package: jaeger-client
      Source: pip
      Version: 4.4.0
      Hash: ''
      licenses:
      - Apache-2.0
      Title: jaeger-client
      DownloadURL: https://files.pythonhosted.org/packages/cb/45/aa60d2fe5e727e718c2cd2e9fa5b240f59c2c12cb9213b1c8709e4e115eb/jaeger-client-4.4.0.tar.gz
  bazaar:
    register: 'no'
    prim: 3/CTX1025993
    community_link: https://github.com/jaegertracing/jaeger-client-python
    community_name: https://github.com/jaegertracing/jaeger-client-python
    community_url: https://github.com/jaegertracing/jaeger-client-python
    component_comment: ''
    component_highlevel_description: This is a client-side library that can be used
      to instrument Python apps for distributed trace collection, and to send those
      traces to Jaeger. See the OpenTracing Python API for additional detail.
    component_name: jaeger-client-python
    component_platform: linux
    component_programing_language: Python
    component_version: 4.4.0
    licenses:
    - FAL1159004/20 (Apache License 2.0 (Apache-2.0))
    src_download_link: https://github.com/jaegertracing/jaeger-client-python/archive/4.4.0.tar.gz
    stako_decision_reason: allowed
    stako: ESW3
    stako_comment: Product version is older than 18 months
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=985083&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: United States
    crypto: No Encryption
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: jaeger-client
    target_sw: linux
    vendor: pip
    version: 4.4.0
    web_url: https://github.com/jaegertracing/jaeger-client-python
  licenses:
  - Apache-2.0
  name: jaeger-client
  primary:
  - this
  subcomponent: false
  type: FOSS
  versions:
  - 4.4.0
  mimer:
    linking: Static
    product_number: CTX1025993
    product_version_label: 4.4.0
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'True'
  alerts:
  - '''jaeger-client-python'': Manual set stako_decision_reason: ''allowed'' for stako:
    ''ESW3'', team takes the risk!'
  - '''985083'': Manual set stako_decision_reason: ''allowed'' for stako: ''ESW3'',
    team takes the risk!'
- ID: Jinja2+3.1.2
  additional_info:
    fossa-attribution:
      Description: 'Jinja=====Jinja is a fast, expressive, extensible templating engine.
        Specialplaceholders in the template allow writing code similar to Pythonsyntax.
        Then the template is passed data to render the final document.It includes:-   Template
        inheritance and inclusion.-   Define and import macros within templates.-   HTML
        templates can use autoescaping to prevent XSS from untrusted    user input.-   A
        sandboxed environment can safely render untrusted templates.-   AsyncIO support
        for generating templates and calling async    functions.-   I18N support with
        Babel.-   Templates are compiled to optimized Python code just-in-time and    cached,
        or can be compiled ahead-of-time.-   Exceptions point to the correct line
        in templates to make debugging    easier.-   Extensible filters, tests, functions,
        and even syntax.Jinja''s philosophy is that while application logic belongs
        in Python ifpossible, it shouldn''t make the template designer''s job difficult
        byrestricting functionality too much.Installing----------Install and update
        using `pip`_:.. code-block:: text    $ pip install -U Jinja2.. _pip: https://pip.pypa.io/en/stable/getting-started/In
        A Nutshell-------------.. code-block:: jinja    {% extends "base.html" %}    {%
        block title %}Members{% endblock %}    {% block content %}      <ul>      {%
        for user in users %}        <li><a href="{{ user.url }}">{{ user.username
        }}</a></li>      {% endfor %}      </ul>    {% endblock %}Donate------The
        Pallets organization develops and supports Jinja and other popularpackages.
        In order to grow the community of contributors and users, andallow the maintainers
        to devote more time to the projects, `pleasedonate today`_... _please donate
        today: https://palletsprojects.com/donateLinks------   Documentation: https://jinja.palletsprojects.com/-   Changes:
        https://jinja.palletsprojects.com/changes/-   PyPI Releases: https://pypi.org/project/Jinja2/-   Source
        Code: https://github.com/pallets/jinja/-   Issue Tracker: https://github.com/pallets/jinja/issues/-   Website:
        https://palletsprojects.com/p/jinja/-   Twitter: https://twitter.com/PalletsTeam-   Chat:
        https://discord.gg/pallets'
      Package: Jinja2
      Source: pip
      Version: 3.1.2
      Hash: ''
      licenses:
      - BSD-3-Clause
      - ISC
      Title: Jinja2
      DownloadURL: https://files.pythonhosted.org/packages/7a/ff/75c28576a1d900e87eb6335b063fab47a8ef3c8b4d88524c4bf78f670cce/Jinja2-3.1.2.tar.gz
  bazaar:
    register: 'no'
    prim: 21/CAX1054904
    community_link: https://github.com/pallets/jinja
    community_name: https://github.com/pallets/jinja
    community_url: https://github.com/pallets/jinja
    component_comment: ''
    component_highlevel_description: Jinja2 is a template engine written in pure Python.
      It provides a Django inspired non-XML syntax but supports inline expressions
      and an optional sandboxed environment.
    component_name: Jinja2
    component_platform: linux
    component_programing_language: Python
    component_version: 3.1.2
    licenses:
    - FAL1159003/2 (BSD 3-Clause (BSD-3-Clause))
    src_download_link: https://github.com/pallets/jinja/archive/3.1.2.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1022055&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: United States
    crypto: N/A
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: Jinja2
    target_sw: linux
    vendor: pip
    version: 3.1.2
    web_url: https://palletsprojects.com/p/jinja/
  licenses:
  - BSD-3-Clause
  - ISC
  name: Jinja2
  primary:
  - this
  subcomponent: false
  type: FOSS
  versions:
  - 3.1.2
  mimer:
    linking: Static
    product_number: CAX1054904
    product_version_label: 3.1.2
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'True'
- ID: jsonschema+3.2.0
  additional_info:
    fossa-attribution:
      Description: "==========jsonschema==========|PyPI| |Pythons| |CI| |ReadTheDocs|
        |Precommit| |Zenodo|.. |PyPI| image:: https://img.shields.io/pypi/v/jsonschema.svg
        \  :alt: PyPI version   :target: https://pypi.org/project/jsonschema/.. |Pythons|
        image:: https://img.shields.io/pypi/pyversions/jsonschema.svg   :alt: Supported
        Python versions   :target: https://pypi.org/project/jsonschema/.. |CI| image::
        https://github.com/python-jsonschema/jsonschema/workflows/CI/badge.svg  :alt:
        Build status  :target: https://github.com/python-jsonschema/jsonschema/actions?query=workflow%3ACI..
        |ReadTheDocs| image:: https://readthedocs.org/projects/python-jsonschema/badge/?version=stable&style=flat
        \  :alt: ReadTheDocs status   :target: https://python-jsonschema.readthedocs.io/en/stable/..
        |Precommit| image:: https://results.pre-commit.ci/badge/github/python-jsonschema/jsonschema/main.svg
        \  :alt: pre-commit.ci status   :target: https://results.pre-commit.ci/latest/github/python-jsonschema/jsonschema/main..
        |Zenodo| image:: https://zenodo.org/badge/3072629.svg   :alt: Zenodo DOI   :target:
        https://zenodo.org/badge/latestdoi/3072629``jsonschema`` is an implementation
        of the `JSON Schema <https://json-schema.org>`_ specification for Python...
        code:: python    >>> from jsonschema import validate    >>> # A sample schema,
        like what we'd get from json.load()    >>> schema = {    ...     \"type\"
        : \"object\",    ...     \"properties\" : {    ...         \"price\" : {\"type\"
        : \"number\"},    ...         \"name\" : {\"type\" : \"string\"},    ...     },
        \   ... }    >>> # If no exception is raised by validate(), the instance is
        valid.    >>> validate(instance={\"name\" : \"Eggs\", \"price\" : 34.99},
        schema=schema)    >>> validate(    ...     instance={\"name\" : \"Eggs\",
        \"price\" : \"Invalid\"}, schema=schema,    ... )                                   #
        doctest: +IGNORE_EXCEPTION_DETAIL    Traceback (most recent call last):        ...
        \   ValidationError: 'Invalid' is not of type 'number'It can also be used
        from the command line by installing `check-jsonschema <https://github.com/python-jsonschema/check-jsonschema>`_.Features--------*
        Full support for `Draft 2020-12 <https://python-jsonschema.readthedocs.io/en/latest/api/jsonschema/validators/#jsonschema.validators.Draft202012Validator>`_,
        `Draft 2019-09 <https://python-jsonschema.readthedocs.io/en/latest/api/jsonschema/validators/#jsonschema.validators.Draft201909Validator>`_,
        `Draft 7 <https://python-jsonschema.readthedocs.io/en/latest/api/jsonschema/validators/#jsonschema.validators.Draft7Validator>`_,
        `Draft 6 <https://python-jsonschema.readthedocs.io/en/latest/api/jsonschema/validators/#jsonschema.validators.Draft6Validator>`_,
        `Draft 4 <https://python-jsonschema.readthedocs.io/en/latest/api/jsonschema/validators/#jsonschema.validators.Draft4Validator>`_
        and `Draft 3 <https://python-jsonschema.readthedocs.io/en/latest/api/jsonschema/validators/#jsonschema.validators.Draft3Validator>`_*
        `Lazy validation <https://python-jsonschema.readthedocs.io/en/latest/api/jsonschema/protocols/#jsonschema.protocols.Validator.iter_errors>`_
        that can iteratively report *all* validation errors.* `Programmatic querying
        <https://python-jsonschema.readthedocs.io/en/latest/errors/>`_ of which properties
        or items failed validation.Installation------------``jsonschema`` is available
        on `PyPI <https://pypi.org/project/jsonschema/>`_. You can install using `pip
        <https://pip.pypa.io/en/stable/>`_:.. code:: bash    $ pip install jsonschemaExtras======Two
        extras are available when installing the package, both currently related to
        ``format`` validation:    * ``format``    * ``format-nongpl``They can be used
        when installing in order to include additional dependencies, e.g.:.. code::
        bash    $ pip install jsonschema'[format]'Be aware that the mere presence
        of these dependencies \u2013 or even the specification of ``format`` checks
        in a schema \u2013 do *not* activate format checks (as per the specification).Please
        read the `format validation documentation <https://python-jsonschema.readthedocs.io/en/latest/validate/#validating-formats>`_
        for further details.About-----I'm Julian Berman.``jsonschema`` is on `GitHub
        <https://github.com/python-jsonschema/jsonschema>`_.Get in touch, via GitHub
        or otherwise, if you've got something to contribute, it'd be most welcome!You
        can also generally find me on Libera (nick: ``Julian``) in various channels,
        including ``#python``.If you feel overwhelmingly grateful, you can also `sponsor
        me <https://github.com/sponsors/Julian/>`_.And for companies who appreciate
        ``jsonschema`` and its continued support and growth, ``jsonschema`` is also
        now supportable via `TideLift <https://tidelift.com/subscription/pkg/pypi-jsonschema?utm_source=pypi-jsonschema&utm_medium=referral&utm_campaign=readme>`_.Release
        Information-------------------v4.19.0=======* Importing the ``Validator``
        protocol directly from the package root is deprecated.  Import it from ``jsonschema.protocols.Validator``
        instead.* Automatic retrieval of remote references (which is still deprecated)
        now properly succeeds even if the retrieved resource does not declare which
        version of JSON Schema it uses.  Such resources are assumed to be 2020-12
        schemas.  This more closely matches the pre-referencing library behavior."
      Package: jsonschema
      Source: pip
      Version: 3.2.0
      Hash: ''
      licenses:
      - MIT
      Title: jsonschema
      DownloadURL: https://files.pythonhosted.org/packages/c5/8f/51e89ce52a085483359217bc72cdbf6e75ee595d5b1d4b5ade40c7e018b8/jsonschema-3.2.0-py2.py3-none-any.whl
  bazaar:
    register: 'no'
    prim: 9/CAX1056538
    community_link: https://github.com/Julian/jsonschema
    community_name: https://github.com/Julian/jsonschema
    community_url: https://github.com/Julian/jsonschema
    component_comment: ''
    component_highlevel_description: jsonschema is an implementation of JSON Schema
      for Python (supporting 2.7+ including Python 3).
    component_name: jsonschema
    component_platform: linux
    component_programing_language: Python
    component_version: 3.2.0
    licenses:
    - FAL1159008 (MIT License (MIT))
    src_download_link: https://github.com/Julian/jsonschema/archive/v3.2.0.zip
    stako_decision_reason: allowed
    stako: ESW4
    stako_comment: Product version is older than 18 months. Newer versions exists
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=927170&id-filter=equals&rowDisplay=Card-Simple
    recode: REL
    retext: PRODUCT VERSION IS OLDER THAN 18 MONTHS. NEWER VERSIONS EXISTS
    country: United States
    crypto: No Encryption
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: jsonschema
    target_sw: linux
    vendor: pip
    version: 3.2.0
    web_url: https://pypi.org/project/jsonschema/4.17.3/
  licenses:
  - MIT
  name: jsonschema
  primary:
  - this
  subcomponent: false
  type: FOSS
  versions:
  - 3.2.0
  mimer:
    linking: Static
    product_number: CAX1056538
    product_version_label: v3.2.0
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'True'
    selected_licenses:
    - MIT
  alerts:
  - Stako is 'ESW4', BAZAAR component is not recommended to be used
- ID: MarkupSafe+2.1.3
  additional_info:
    fossa-attribution:
      Description: 'MarkupSafe==========MarkupSafe implements a text object that escapes
        characters so it issafe to use in HTML and XML. Characters that have special
        meanings arereplaced so that they display as the actual characters. This mitigatesinjection
        attacks, meaning untrusted user input can safely be displayedon a page.Installing----------Install
        and update using `pip`_:.. code-block:: text    pip install -U MarkupSafe..
        _pip: https://pip.pypa.io/en/stable/getting-started/Examples--------.. code-block::
        pycon    >>> from markupsafe import Markup, escape    >>> # escape replaces
        special characters and wraps in Markup    >>> escape("<script>alert(document.cookie);</script>")    Markup(''&lt;script&gt;alert(document.cookie);&lt;/script&gt;'')    >>>
        # wrap in Markup to mark text "safe" and prevent escaping    >>> Markup("<strong>Hello</strong>")    Markup(''<strong>hello</strong>'')    >>>
        escape(Markup("<strong>Hello</strong>"))    Markup(''<strong>hello</strong>'')    >>>
        # Markup is a str subclass    >>> # methods and operators escape their arguments    >>>
        template = Markup("Hello <em>{name}</em>")    >>> template.format(name=''"World"'')    Markup(''Hello
        <em>&#34;World&#34;</em>'')Donate------The Pallets organization develops and
        supports MarkupSafe and otherpopular packages. In order to grow the community
        of contributors andusers, and allow the maintainers to devote more time to
        the projects,`please donate today`_... _please donate today: https://palletsprojects.com/donateLinks------   Documentation:
        https://markupsafe.palletsprojects.com/-   Changes: https://markupsafe.palletsprojects.com/changes/-   PyPI
        Releases: https://pypi.org/project/MarkupSafe/-   Source Code: https://github.com/pallets/markupsafe/-   Issue
        Tracker: https://github.com/pallets/markupsafe/issues/-   Chat: https://discord.gg/pallets'
      Package: MarkupSafe
      Source: pip
      Version: 2.1.3
      Hash: ''
      licenses:
      - BSD-3-Clause
      Title: MarkupSafe
      DownloadURL: https://files.pythonhosted.org/packages/6d/7c/59a3248f411813f8ccba92a55feaac4bf360d29e2ff05ee7d8e1ef2d7dbf/MarkupSafe-2.1.3.tar.gz
  bazaar:
    register: 'no'
    prim: 12/CAX1056401
    community_link: https://github.com/pallets/markupsafe
    community_name: https://github.com/pallets/markupsafe
    community_url: https://github.com/pallets/markupsafe
    component_comment: ''
    component_highlevel_description: Safely add untrusted strings to HTML/XML markup.
    component_name: markupsafe
    component_platform: linux
    component_programing_language: Python
    component_version: 2.1.3
    licenses:
    - FAL1159003/2 (BSD 3-Clause (BSD-3-Clause))
    src_download_link: https://github.com/pallets/markupsafe/archive/2.1.3.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1048947&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: United States
    crypto: ''
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: MarkupSafe
    target_sw: linux
    vendor: pip
    version: 2.1.3
    web_url: https://palletsprojects.com/p/markupsafe/
  licenses:
  - BSD-3-Clause
  name: MarkupSafe
  primary:
  - this
  subcomponent: false
  type: FOSS
  versions:
  - 2.1.3
  mimer:
    linking: Static
    product_number: CAX1056401
    product_version_label: 2.1.3
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'True'
- ID: numpy+1.25.2
  additional_info:
    fossa-attribution:
      Description: The fossa information is fetched from  FOSSA service. Don't Edit!
      Package: numpy
      Source: pip
      Version: 1.25.2
      Hash: ''
      licenses:
      - BSD-3-Clause
      Title: numpy
      DownloadURL: https://files.pythonhosted.org/packages/a0/41/8f53eff8e969dd8576ddfb45e7ed315407d27c7518ae49418be8ed532b07/numpy-1.25.2.tar.gz
  bazaar:
    register: 'no'
    prim: 67/CAX1057111
    community_link: https://github.com/numpy/numpy
    community_name: https://github.com/numpy/numpy
    community_url: https://github.com/numpy/numpy
    component_comment: ''
    component_highlevel_description: The fundamental package for scientific computing
      with Python.
    component_name: numPy, Python
    component_platform: linux
    component_programing_language: Python
    component_version: V1.25.2
    licenses:
    - FAL1159003/2 (BSD 3-Clause (BSD-3-Clause))
    src_download_link: https://github.com/numpy/numpy/archive/v1.25.2.tar.gz
    stako_decision_reason: allowed
    stako: ESW3
    stako_comment: Copyleft license found.
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1055681&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: United States
    crypto: No Encryption
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: numpy
    target_sw: linux
    vendor: pip
    version: 1.25.2
    web_url: ''
  licenses:
  - BSD-3-Clause
  name: numpy
  primary:
  - this
  subcomponent: false
  type: FOSS
  versions:
  - 1.25.2
  mimer:
    linking: Static
    product_number: CAX1057111
    product_version_label: 1.25.2
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'True'
  alerts:
  - Stako is 'ESW3', BAZAAR component is not recommended to be used
  - '''1055681'': Manual set stako_decision_reason: ''allowed'' for stako: ''ESW3'',
    team takes the risk!'
- ID: opentracing+2.4.0
  additional_info:
    fossa-attribution:
      Description: 'OpenTracing API for Python==========================|GitterChat|
        |BuildStatus| |PyPI| |ReadTheDocs|This library is a Python platform API for
        OpenTracing.Required Reading----------------In order to understand the Python
        platform API, one must first be familiar withthe `OpenTracing project <http://opentracing.io>`_
        and`terminology <http://opentracing.io/documentation/pages/spec.html>`_ morespecifically.Status------In
        the current version, ``opentracing-python`` provides only the API and abasic
        no-op implementation that can be used by instrumentation libraries tocollect
        and propagate distributed tracing context.Future versions will include a reference
        implementation utilizing anabstract Recorder interface, as well as a`Zipkin
        <http://openzipkin.github.io>`_-compatible Tracer.Usage-----The work of instrumentation
        libraries generally consists of three steps:1. When a service receives a new
        request (over HTTP or some other protocol),   it uses OpenTracing''s inject/extract
        API to continue an active trace, creating a   Span object in the process.
        If the request does not contain an active trace,   the service starts a new
        trace and a new *root* Span.2. The service needs to store the current Span
        in some request-local storage,   (called ``Span`` *activation*) where it can
        be retrieved from when a child Span must   be created, e.g. in case of the
        service making an RPC to another service.3. When making outbound calls to
        another service, the current Span must be   retrieved from request-local storage,
        a child span must be created (e.g., by   using the ``start_child_span()``
        helper), and that child span must be embedded   into the outbound request
        (e.g., using HTTP headers) via OpenTracing''s   inject/extract API.Below are
        the code examples for the previously mentioned steps. Implementationof request-local
        storage needed for step 2 is specific to the service and/or frameworks /instrumentation
        libraries it is using, exposed as a ``ScopeManager`` child containedas ``Tracer.scope_manager``.
        See details below.Inbound request^^^^^^^^^^^^^^^Somewhere in your server''s
        request handler code:.. code-block:: python   def handle_request(request):       span
        = before_request(request, opentracing.global_tracer())       # store span
        in some request-local storage using Tracer.scope_manager,       # using the
        returned `Scope` as Context Manager to ensure       # `Span` will be cleared
        and (in this case) `Span.finish()` be called.       with tracer.scope_manager.activate(span,
        True) as scope:           # actual business logic           handle_request_for_real(request)   def
        before_request(request, tracer):       span_context = tracer.extract(           format=Format.HTTP_HEADERS,           carrier=request.headers,       )       span
        = tracer.start_span(           operation_name=request.operation,           child_of=span_context)       span.set_tag(''http.url'',
        request.full_url)       remote_ip = request.remote_ip       if remote_ip:           span.set_tag(tags.PEER_HOST_IPV4,
        remote_ip)       caller_name = request.caller_name       if caller_name:           span.set_tag(tags.PEER_SERVICE,
        caller_name)       remote_port = request.remote_port       if remote_port:           span.set_tag(tags.PEER_PORT,
        remote_port)       return spanOutbound request----------------Somewhere in
        your service that''s about to make an outgoing call:.. code-block:: python   from
        opentracing import tags   from opentracing.propagation import Format   from
        opentracing_instrumentation import request_context   # create and serialize
        a child span and use it as context manager   with before_http_request(       request=out_request,       current_span_extractor=request_context.get_current_span):       #
        actual call       return urllib2.urlopen(request)   def before_http_request(request,
        current_span_extractor):       op = request.operation       parent_span =
        current_span_extractor()       outbound_span = opentracing.global_tracer().start_span(           operation_name=op,           child_of=parent_span       )       outbound_span.set_tag(''http.url'',
        request.full_url)       service_name = request.service_name       host, port
        = request.host_port       if service_name:           outbound_span.set_tag(tags.PEER_SERVICE,
        service_name)       if host:           outbound_span.set_tag(tags.PEER_HOST_IPV4,
        host)       if port:           outbound_span.set_tag(tags.PEER_PORT, port)       http_header_carrier
        = {}       opentracing.global_tracer().inject(           span_context=outbound_span,           format=Format.HTTP_HEADERS,           carrier=http_header_carrier)       for
        key, value in http_header_carrier.iteritems():           request.add_header(key,
        value)       return outbound_spanScope and within-process propagation^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^For
        getting/setting the current active ``Span`` in the used request-local storage,OpenTracing
        requires that every ``Tracer`` contains a ``ScopeManager`` that grantsaccess
        to the active ``Span`` through a ``Scope``. Any ``Span`` may be transferred
        toanother task or thread, but not ``Scope``... code-block:: python       #
        Access to the active span is straightforward.       scope = tracer.scope_manager.active()       if
        scope is not None:           scope.span.set_tag(''...'', ''...'')The common
        case starts a ``Scope`` that''s automatically registered for intra-processpropagation
        via ``ScopeManager``.Note that ``start_active_span(''...'')`` automatically
        finishes the span on ``Scope.close()``(``start_active_span(''...'', finish_on_close=False)``
        does not finish it, in contrast)... code-block:: python       # Manual activation
        of the Span.       span = tracer.start_span(operation_name=''someWork'')       with
        tracer.scope_manager.activate(span, True) as scope:           # Do things.       #
        Automatic activation of the Span.       # finish_on_close is a required parameter.       with
        tracer.start_active_span(''someWork'', finish_on_close=True) as scope:           #
        Do things.       # Handling done through a try construct:       span = tracer.start_span(operation_name=''someWork'')       scope
        = tracer.scope_manager.activate(span, True)       try:           # Do things.       except
        Exception as e:           span.set_tag(''error'', ''...'')       finally:           scope.close()**If
        there is a Scope, it will act as the parent to any newly started Span** unlessthe
        programmer passes ``ignore_active_span=True`` at ``start_span()``/``start_active_span()``time
        or specified parent context explicitly:.. code-block:: python       scope
        = tracer.start_active_span(''someWork'', ignore_active_span=True)Each service/framework
        ought to provide a specific ``ScopeManager`` implementationthat relies on
        their own request-local storage (thread-local storage, or coroutine-based
        storagefor asynchronous frameworks, for example).Scope managers^^^^^^^^^^^^^^This
        project includes a set of ``ScopeManager`` implementations under the ``opentracing.scope_managers``
        submodule, which can be imported on demand:.. code-block:: python   from opentracing.scope_managers
        import ThreadLocalScopeManagerThere exist implementations for ``thread-local``
        (the default instance of the submodule ``opentracing.scope_managers``), ``gevent``,
        ``Tornado``, ``asyncio`` and ``contextvars``:.. code-block:: python   from
        opentracing.scope_managers.gevent import GeventScopeManager # requires gevent   from
        opentracing.scope_managers.tornado import TornadoScopeManager # requires tornado<6   from
        opentracing.scope_managers.asyncio import AsyncioScopeManager # fits for old
        asyncio applications, requires Python 3.4 or newer.   from opentracing.scope_managers.contextvars
        import ContextVarsScopeManager # for asyncio applications, requires Python
        3.7 or newer.**Note** that for asyncio applications it''s preferable to use
        ``ContextVarsScopeManager`` instead of ``AsyncioScopeManager`` because of
        automatic parent span propagation to children coroutines, tasks or scheduled
        callbacks.Development-----------Tests^^^^^.. code-block:: sh   virtualenv
        env   . ./env/bin/activate   make bootstrap   make testYou can use `tox <https://tox.readthedocs.io>`_
        to run tests as well... code-block:: sh    toxTestbed suite^^^^^^^^^^^^^A
        testbed suite designed to test API changes and experimental features is included
        under the *testbed* directory. For more information, see the `Testbed README
        <testbed/README.md>`_.Instrumentation Tests---------------------This project
        has a working design of interfaces for the OpenTracing API. There is a MockTracer
        tofacilitate unit-testing of OpenTracing Python instrumentation... code-block::
        python       from opentracing.mocktracer import MockTracer       tracer =
        MockTracer()       with tracer.start_span(''someWork'') as span:           pass       spans
        = tracer.finished_spans()       someWorkSpan = spans[0]Documentation^^^^^^^^^^^^^..
        code-block:: sh   virtualenv env   . ./env/bin/activate   make bootstrap   make
        docsThe documentation is written to *docs/_build/html*.LICENSE^^^^^^^`Apache
        2.0 License <./LICENSE>`__.Releases^^^^^^^^Before new release, add a summary
        of changes since last version to CHANGELOG.rst.. code-block:: sh   pip install
        zest.releaser[recommended]   prerelease   release   git push origin master
        --follow-tags   python setup.py sdist upload -r pypi upload_docs -r pypi   postrelease   git
        push.. |GitterChat| image:: http://img.shields.io/badge/gitter-join%20chat%20%E2%86%92-brightgreen.svg   :target:
        https://gitter.im/opentracing/public.. |BuildStatus| image:: https://travis-ci.org/opentracing/opentracing-python.svg?branch-master   :target:
        https://travis-ci.org/opentracing/opentracing-python.. |PyPI| image:: https://badge.fury.io/py/opentracing.svg   :target:
        https://badge.fury.io/py/opentracing.. |ReadTheDocs| image:: http://readthedocs.org/projects/opentracing-python/badge/?version=latest   :target:
        https://opentracing-python.readthedocs.io/en/latest/?badge=latest   :alt:
        Documentation Status'
      Package: opentracing
      Source: pip
      Version: 2.4.0
      Hash: ''
      licenses:
      - Apache-2.0
      - MIT
      Title: opentracing
      DownloadURL: https://files.pythonhosted.org/packages/51/28/2dba4e3efb64cc59d4311081a5ddad1dde20a19b69cd0f677cdb2f2c29a6/opentracing-2.4.0.tar.gz
  bazaar:
    register: 'no'
    prim: 3/CTX1024029
    community_link: https://github.com/opentracing/opentracing-python
    community_name: https://github.com/opentracing/opentracing-python
    community_url: https://github.com/opentracing/opentracing-python
    component_comment: ''
    component_highlevel_description: This library is a Python platform API for OpenTracing.
    component_name: OpenTracing API, Python
    component_platform: linux
    component_programing_language: Python
    component_version: 2.4.0
    licenses:
    - FAL1159004/20 (Apache License 2.0 (Apache-2.0))
    - FAL1159008 (MIT License (MIT))
    src_download_link: https://github.com/opentracing/opentracing-python/archive/2.4.0.zip
    stako_decision_reason: allowed
    stako: ESW3
    stako_comment: Product version is older than 18 months
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=947919&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: United States
    crypto: No Encryption
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: opentracing
    target_sw: linux
    vendor: pip
    version: 2.4.0
    web_url: https://github.com/opentracing/opentracing-python
  licenses:
  - Apache-2.0
  - MIT
  name: opentracing
  primary:
  - this
  selected_licenses:
  - MIT
  subcomponent: false
  type: FOSS
  versions:
  - 2.4.0
  mimer:
    linking: Static
    product_number: CTX1024029
    product_version_label: 2.4.0
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'True'
  alerts:
  - '''OpenTracing API, Python'': Manual set stako_decision_reason: ''allowed'' for
    stako: ''ESW3'', team takes the risk!'
  - '''947919'': Manual set stako_decision_reason: ''allowed'' for stako: ''ESW3'',
    team takes the risk!'
- ID: prometheus-client+0.8.0
  additional_info:
    fossa-attribution:
      Description: '# Prometheus Python ClientThe official Python client for [Prometheus](https://prometheus.io).##
        Three Step Demo**One**: Install the client:```pip install prometheus-client```**Two**:
        Paste the following into a Python interpreter:```pythonfrom prometheus_client
        import start_http_server, Summaryimport randomimport time# Create a metric
        to track time spent and requests made.REQUEST_TIME = Summary(''request_processing_seconds'',
        ''Time spent processing request'')# Decorate function with metric.@REQUEST_TIME.time()def
        process_request(t):    """A dummy function that takes some time."""    time.sleep(t)if
        __name__ == ''__main__'':    # Start up the server to expose the metrics.    start_http_server(8000)    #
        Generate some requests.    while True:        process_request(random.random())```**Three**:
        Visit [http://localhost:8000/](http://localhost:8000/) to view the metrics.From
        one easy to use decorator you get:  * `request_processing_seconds_count`:
        Number of times this function was called.  * `request_processing_seconds_sum`:
        Total amount of time spent in this function.Prometheus''s `rate` function
        allows calculation of both requests per second,and latency over time from
        this data.In addition if you''re on Linux the `process` metrics expose CPU,
        memory andother information about the process for free!## Installation```pip
        install prometheus-client```This package can be found on[PyPI](https://pypi.python.org/pypi/prometheus_client).##
        InstrumentingFour types of metric are offered: Counter, Gauge, Summary and
        Histogram.See the documentation on [metric types](http://prometheus.io/docs/concepts/metric_types/)and
        [instrumentation best practices](https://prometheus.io/docs/practices/instrumentation/#counter-vs-gauge-summary-vs-histogram)on
        how to use them.### CounterCounters go up, and reset when the process restarts.```pythonfrom
        prometheus_client import Counterc = Counter(''my_failures'', ''Description
        of counter'')c.inc()     # Increment by 1c.inc(1.6)  # Increment by given
        value```If there is a suffix of `_total` on the metric name, it will be removed.
        Whenexposing the time series for counter, a `_total` suffix will be added.
        This isfor compatibility between OpenMetrics and the Prometheus text format,
        as OpenMetricsrequires the `_total` suffix.There are utilities to count exceptions
        raised:```python@c.count_exceptions()def f():  passwith c.count_exceptions():  pass#
        Count only one type of exceptionwith c.count_exceptions(ValueError):  pass```###
        GaugeGauges can go up and down.```pythonfrom prometheus_client import Gaugeg
        = Gauge(''my_inprogress_requests'', ''Description of gauge'')g.inc()      #
        Increment by 1g.dec(10)    # Decrement by given valueg.set(4.2)   # Set to
        a given value```There are utilities for common use cases:```pythong.set_to_current_time()   #
        Set to current unixtime# Increment when entered, decrement when exited.@g.track_inprogress()def
        f():  passwith g.track_inprogress():  pass```A Gauge can also take its value
        from a callback:```pythond = Gauge(''data_objects'', ''Number of objects'')my_dict
        = {}d.set_function(lambda: len(my_dict))```### SummarySummaries track the
        size and number of events.```pythonfrom prometheus_client import Summarys
        = Summary(''request_latency_seconds'', ''Description of summary'')s.observe(4.7)    #
        Observe 4.7 (seconds in this case)```There are utilities for timing code:```python@s.time()def
        f():  passwith s.time():  pass```The Python client doesn''t store or expose
        quantile information at this time.### HistogramHistograms track the size and
        number of events in buckets.This allows for aggregatable calculation of quantiles.```pythonfrom
        prometheus_client import Histogramh = Histogram(''request_latency_seconds'',
        ''Description of histogram'')h.observe(4.7)    # Observe 4.7 (seconds in this
        case)```The default buckets are intended to cover a typical web/rpc request
        from milliseconds to seconds.They can be overridden by passing `buckets` keyword
        argument to `Histogram`.There are utilities for timing code:```python@h.time()def
        f():  passwith h.time():  pass```### InfoInfo tracks key-value information,
        usually about a whole target.```pythonfrom prometheus_client import Infoi
        = Info(''my_build_version'', ''Description of info'')i.info({''version'':
        ''1.2.3'', ''buildhost'': ''foo@bar''})```### EnumEnum tracks which of a set
        of states something is currently in.```pythonfrom prometheus_client import
        Enume = Enum(''my_task_state'', ''Description of enum'',        states=[''starting'',
        ''running'', ''stopped''])e.state(''running'')```### LabelsAll metrics can
        have labels, allowing grouping of related time series.See the best practices
        on [naming](http://prometheus.io/docs/practices/naming/)and [labels](http://prometheus.io/docs/practices/instrumentation/#use-labels).Taking
        a counter as an example:```pythonfrom prometheus_client import Counterc =
        Counter(''my_requests_total'', ''HTTP Failures'', [''method'', ''endpoint''])c.labels(''get'',
        ''/'').inc()c.labels(''post'', ''/submit'').inc()```Labels can also be passed
        as keyword-arguments:```pythonfrom prometheus_client import Counterc = Counter(''my_requests_total'',
        ''HTTP Failures'', [''method'', ''endpoint''])c.labels(method=''get'', endpoint=''/'').inc()c.labels(method=''post'',
        endpoint=''/submit'').inc()```Metrics with labels are not initialized when
        declared, because the client can''tknow what values the label can have. It
        is recommended to initialize the labelvalues by calling the `.labels()` method
        alone:```pythonfrom prometheus_client import Counterc = Counter(''my_requests_total'',
        ''HTTP Failures'', [''method'', ''endpoint''])c.labels(''get'', ''/'')c.labels(''post'',
        ''/submit'')```### ExemplarsExemplars can be added to counter and histogram
        metrics. Exemplars can bespecified by passing a dict of label value pairs
        to be exposed as the exemplar.For example with a counter:```pythonfrom prometheus_client
        import Counterc = Counter(''my_requests_total'', ''HTTP Failures'', [''method'',
        ''endpoint''])c.labels(''get'', ''/'').inc(exemplar={''trace_id'': ''abc123''})c.labels(''post'',
        ''/submit'').inc(1.0, {''trace_id'': ''def456''})```And with a histogram:```pythonfrom
        prometheus_client import Histogramh = Histogram(''request_latency_seconds'',
        ''Description of histogram'')h.observe(4.7, {''trace_id'': ''abc123''})```###
        Disabling `_created` metricsBy default counters, histograms, and summaries
        export an additional seriessuffixed with `_created` and a value of the unix
        timestamp for when the metricwas created. If this information is not helpful,
        it can be disabled by settingthe environment variable `PROMETHEUS_DISABLE_CREATED_SERIES=True`.###
        Process CollectorThe Python client automatically exports metrics about process
        CPU usage, RAM,file descriptors and start time. These all have the prefix
        `process`, andare only currently available on Linux.The namespace and pid
        constructor arguments allows for exporting metrics aboutother processes, for
        example:```ProcessCollector(namespace=''mydaemon'', pid=lambda: open(''/var/run/daemon.pid'').read())```###
        Platform CollectorThe client also automatically exports some metadata about
        Python. If using Jython,metadata about the JVM in use is also included. This
        information is available as labels on the `python_info` metric. The value
        of the metric is 1, since it is the labels that carry information.### Disabling
        Default Collector metricsBy default the collected `process`, `gc`, and `platform`
        collector metrics are exported.If this information is not helpful, it can
        be disabled using the following:```pythonimport prometheus_clientprometheus_client.REGISTRY.unregister(prometheus_client.GC_COLLECTOR)prometheus_client.REGISTRY.unregister(prometheus_client.PLATFORM_COLLECTOR)prometheus_client.REGISTRY.unregister(prometheus_client.PROCESS_COLLECTOR)```##
        ExportingThere are several options for exporting metrics.### HTTPMetrics are
        usually exposed over HTTP, to be read by the Prometheus server.The easiest
        way to do this is via `start_http_server`, which will start a HTTPserver in
        a daemon thread on the given port:```pythonfrom prometheus_client import start_http_serverstart_http_server(8000)```Visit
        [http://localhost:8000/](http://localhost:8000/) to view the metrics.To add
        Prometheus exposition to an existing HTTP server, see the `MetricsHandler`
        classwhich provides a `BaseHTTPRequestHandler`. It also serves as a simple
        example of howto write a custom endpoint.#### TwistedTo use prometheus with
        [twisted](https://twistedmatrix.com/), there is `MetricsResource` which exposes
        metrics as a twisted resource.```pythonfrom prometheus_client.twisted import
        MetricsResourcefrom twisted.web.server import Sitefrom twisted.web.resource
        import Resourcefrom twisted.internet import reactorroot = Resource()root.putChild(b''metrics'',
        MetricsResource())factory = Site(root)reactor.listenTCP(8000, factory)reactor.run()```####
        WSGITo use Prometheus with [WSGI](http://wsgi.readthedocs.org/en/latest/),
        there is`make_wsgi_app` which creates a WSGI application.```pythonfrom prometheus_client
        import make_wsgi_appfrom wsgiref.simple_server import make_serverapp = make_wsgi_app()httpd
        = make_server('''', 8000, app)httpd.serve_forever()```Such an application
        can be useful when integrating Prometheus metrics with WSGIapps.The method
        `start_wsgi_server` can be used to serve the metrics through theWSGI reference
        implementation in a new thread.```pythonfrom prometheus_client import start_wsgi_serverstart_wsgi_server(8000)```By
        default, the WSGI application will respect `Accept-Encoding:gzip` headers
        used by Prometheusand compress the response if such a header is present. This
        behaviour can be disabled by passing`disable_compression=True` when creating
        the app, like this:```pythonapp = make_wsgi_app(disable_compression=True)```####
        ASGITo use Prometheus with [ASGI](http://asgi.readthedocs.org/en/latest/),
        there is`make_asgi_app` which creates an ASGI application.```pythonfrom prometheus_client
        import make_asgi_appapp = make_asgi_app()```Such an application can be useful
        when integrating Prometheus metrics with ASGIapps.By default, the WSGI application
        will respect `Accept-Encoding:gzip` headers used by Prometheusand compress
        the response if such a header is present. This behaviour can be disabled by
        passing `disable_compression=True` when creating the app, like this:```pythonapp
        = make_asgi_app(disable_compression=True)```#### FlaskTo use Prometheus with
        [Flask](http://flask.pocoo.org/) we need to serve metrics through a Prometheus
        WSGI application. This can be achieved using [Flask''s application dispatching](http://flask.pocoo.org/docs/latest/patterns/appdispatch/).
        Below is a working example.Save the snippet below in a `myapp.py` file```pythonfrom
        flask import Flaskfrom werkzeug.middleware.dispatcher import DispatcherMiddlewarefrom
        prometheus_client import make_wsgi_app# Create my appapp = Flask(__name__)#
        Add prometheus wsgi middleware to route /metrics requestsapp.wsgi_app = DispatcherMiddleware(app.wsgi_app,
        {    ''/metrics'': make_wsgi_app()})```Run the example web application like
        this```bash# Install uwsgi if you do not have itpip install uwsgiuwsgi --http
        127.0.0.1:8000 --wsgi-file myapp.py --callable app```Visit http://localhost:8000/metrics
        to see the metrics#### FastAPI + GunicornTo use Prometheus with [FastAPI](https://fastapi.tiangolo.com/)
        and [Gunicorn](https://gunicorn.org/) we need to serve metrics through a Prometheus
        ASGI application.Save the snippet below in a `myapp.py` file```pythonfrom
        fastapi import FastAPIfrom prometheus_client import make_asgi_app# Create
        appapp = FastAPI(debug=False)# Add prometheus asgi middleware to route /metrics
        requestsmetrics_app = make_asgi_app()app.mount("/metrics", metrics_app)```For
        Multiprocessing support, use this modified code snippet. Full multiprocessing
        instructions are provided [here](https://github.com/prometheus/client_python#multiprocess-mode-eg-gunicorn).```pythonfrom
        fastapi import FastAPIfrom prometheus_client import make_asgi_appapp = FastAPI(debug=False)#
        Using multiprocess collector for registrydef make_metrics_app():    registry
        = CollectorRegistry()    multiprocess.MultiProcessCollector(registry)    return
        make_asgi_app(registry=registry)metrics_app = make_metrics_app()app.mount("/metrics",
        metrics_app)```Run the example web application like this```bash# Install gunicorn
        if you do not have itpip install gunicorn# If using multiple workers, add
        `--workers n` parameter to the line belowgunicorn -b 127.0.0.1:8000 myapp:app
        -k uvicorn.workers.UvicornWorker```Visit http://localhost:8000/metrics to
        see the metrics### Node exporter textfile collectorThe [textfile collector](https://github.com/prometheus/node_exporter#textfile-collector)allows
        machine-level statistics to be exported out via the Node exporter.This is
        useful for monitoring cronjobs, or for writing cronjobs to expose metricsabout
        a machine system that the Node exporter does not support or would not make
        senseto perform at every scrape (for example, anything involving subprocesses).```pythonfrom
        prometheus_client import CollectorRegistry, Gauge, write_to_textfileregistry
        = CollectorRegistry()g = Gauge(''raid_status'', ''1 if raid array is okay'',
        registry=registry)g.set(1)write_to_textfile(''/configured/textfile/path/raid.prom'',
        registry)```A separate registry is used, as the default registry may contain
        other metricssuch as those from the Process Collector.## Exporting to a PushgatewayThe
        [Pushgateway](https://github.com/prometheus/pushgateway)allows ephemeral and
        batch jobs to expose their metrics to Prometheus.```pythonfrom prometheus_client
        import CollectorRegistry, Gauge, push_to_gatewayregistry = CollectorRegistry()g
        = Gauge(''job_last_success_unixtime'', ''Last time a batch job successfully
        finished'', registry=registry)g.set_to_current_time()push_to_gateway(''localhost:9091'',
        job=''batchA'', registry=registry)```A separate registry is used, as the default
        registry may contain other metricssuch as those from the Process Collector.Pushgateway
        functions take a grouping key. `push_to_gateway` replaces metricswith the
        same grouping key, `pushadd_to_gateway` only replaces metrics with thesame
        name and grouping key and `delete_from_gateway` deletes metrics with thegiven
        job and grouping key. See the[Pushgateway documentation](https://github.com/prometheus/pushgateway/blob/master/README.md)for
        more information.`instance_ip_grouping_key` returns a grouping key with the
        instance label setto the host''s IP address.### Handlers for authenticationIf
        the push gateway you are connecting to is protected with HTTP Basic Auth,you
        can use a special handler to set the Authorization header.```pythonfrom prometheus_client
        import CollectorRegistry, Gauge, push_to_gatewayfrom prometheus_client.exposition
        import basic_auth_handlerdef my_auth_handler(url, method, timeout, headers,
        data):    username = ''foobar''    password = ''secret123''    return basic_auth_handler(url,
        method, timeout, headers, data, username, password)registry = CollectorRegistry()g
        = Gauge(''job_last_success_unixtime'', ''Last time a batch job successfully
        finished'', registry=registry)g.set_to_current_time()push_to_gateway(''localhost:9091'',
        job=''batchA'', registry=registry, handler=my_auth_handler)```TLS Auth is
        also supported when using the push gateway with a special handler.```pythonfrom
        prometheus_client import CollectorRegistry, Gauge, push_to_gatewayfrom prometheus_client.exposition
        import tls_auth_handlerdef my_auth_handler(url, method, timeout, headers,
        data):    certfile = ''client-crt.pem''    keyfile = ''client-key.pem''    return
        tls_auth_handler(url, method, timeout, headers, data, certfile, keyfile)registry
        = CollectorRegistry()g = Gauge(''job_last_success_unixtime'', ''Last time
        a batch job successfully finished'', registry=registry)g.set_to_current_time()push_to_gateway(''localhost:9091'',
        job=''batchA'', registry=registry, handler=my_auth_handler)```## BridgesIt
        is also possible to expose metrics to systems other than Prometheus.This allows
        you to take advantage of Prometheus instrumentation evenif you are not quite
        ready to fully transition to Prometheus yet.### GraphiteMetrics are pushed
        over TCP in the Graphite plaintext format.```pythonfrom prometheus_client.bridge.graphite
        import GraphiteBridgegb = GraphiteBridge((''graphite.your.org'', 2003))# Push
        once.gb.push()# Push every 10 seconds in a daemon thread.gb.start(10.0)```Graphite
        [tags](https://grafana.com/blog/2018/01/11/graphite-1.1-teaching-an-old-dog-new-tricks/)
        are also supported.```pythonfrom prometheus_client.bridge.graphite import
        GraphiteBridgegb = GraphiteBridge((''graphite.your.org'', 2003), tags=True)c
        = Counter(''my_requests_total'', ''HTTP Failures'', [''method'', ''endpoint''])c.labels(''get'',
        ''/'').inc()gb.push()```## Custom CollectorsSometimes it is not possible to
        directly instrument code, as it is notin your control. This requires you to
        proxy metrics from other systems.To do so you need to create a custom collector,
        for example:```pythonfrom prometheus_client.core import GaugeMetricFamily,
        CounterMetricFamily, REGISTRYclass CustomCollector(object):    def collect(self):        yield
        GaugeMetricFamily(''my_gauge'', ''Help text'', value=7)        c = CounterMetricFamily(''my_counter_total'',
        ''Help text'', labels=[''foo''])        c.add_metric([''bar''], 1.7)        c.add_metric([''baz''],
        3.8)        yield cREGISTRY.register(CustomCollector())````SummaryMetricFamily`,
        `HistogramMetricFamily` and `InfoMetricFamily` work similarly.A collector
        may implement a `describe` method which returns metrics in the sameformat
        as `collect` (though you don''t have to include the samples). This isused
        to predetermine the names of time series a `CollectorRegistry` exposes andthus
        to detect collisions and duplicate registrations.Usually custom collectors
        do not have to implement `describe`. If `describe` isnot implemented and the
        CollectorRegistry was created with `auto_describe=True`(which is the case
        for the default registry) then `collect` will be called atregistration time
        instead of `describe`. If this could cause problems, eitherimplement a proper
        `describe`, or if that''s not practical have `describe`return an empty list.##
        Multiprocess Mode (E.g. Gunicorn)Prometheus client libraries presume a threaded
        model, where metrics are sharedacross workers. This doesn''t work so well
        for languages such as Python whereit''s common to have processes rather than
        threads to handle large workloads.To handle this the client library can be
        put in multiprocess mode.This comes with a number of limitations:- Registries
        can not be used as normal, all instantiated metrics are exported  - Registering
        metrics to a registry later used by a `MultiProcessCollector`    may cause
        duplicate metrics to be exported- Custom collectors do not work (e.g. cpu
        and memory metrics)- Info and Enum metrics do not work- The pushgateway cannot
        be used- Gauges cannot use the `pid` label- Exemplars are not supportedThere''s
        several steps to getting this working:**1. Deployment**:The `PROMETHEUS_MULTIPROC_DIR`
        environment variable must be set to a directorythat the client library can
        use for metrics. This directory must be wipedbetween process/Gunicorn runs
        (before startup is recommended).This environment variable should be set from
        a start-up shell script,and not directly from Python (otherwise it may not
        propagate to child processes).**2. Metrics collector**:The application must
        initialize a new `CollectorRegistry`, and store themulti-process collector
        inside. It is a best practice to create this registryinside the context of
        a request to avoid metrics registering themselves to acollector used by a
        `MultiProcessCollector`. If a registry with metricsregistered is used by a
        `MultiProcessCollector` duplicate metrics may beexported, one for multiprocess,
        and one for the process serving the request.```pythonfrom prometheus_client
        import multiprocessfrom prometheus_client import generate_latest, CollectorRegistry,
        CONTENT_TYPE_LATEST, CounterMY_COUNTER = Counter(''my_counter'', ''Description
        of my counter'')# Expose metrics.def app(environ, start_response):    registry
        = CollectorRegistry()    multiprocess.MultiProcessCollector(registry)    data
        = generate_latest(registry)    status = ''200 OK''    response_headers = [        (''Content-type'',
        CONTENT_TYPE_LATEST),        (''Content-Length'', str(len(data)))    ]    start_response(status,
        response_headers)    return iter([data])```**3. Gunicorn configuration**:The
        `gunicorn` configuration file needs to include the following function:```pythonfrom
        prometheus_client import multiprocessdef child_exit(server, worker):    multiprocess.mark_process_dead(worker.pid)```**4.
        Metrics tuning (Gauge)**:When `Gauge`s are used in multiprocess applications,you
        must decide how to handle the metrics reported by each process.Gauges have
        several modes they can run in, which can be selected with the `multiprocess_mode`
        parameter.- ''all'': Default. Return a timeseries per process (alive or dead),
        labelled by the process''s `pid` (the label is added internally).- ''min'':
        Return a single timeseries that is the minimum of the values of all processes
        (alive or dead).- ''max'': Return a single timeseries that is the maximum
        of the values of all processes (alive or dead).- ''sum'': Return a single
        timeseries that is the sum of the values of all processes (alive or dead).Prepend
        ''live'' to the beginning of the mode to return the same result but only considering
        living processes(e.g., ''liveall, ''livesum'', ''livemax'', ''livemin'').```pythonfrom
        prometheus_client import Gauge# Example gaugeIN_PROGRESS = Gauge("inprogress_requests",
        "help", multiprocess_mode=''livesum'')```## ParserThe Python client supports
        parsing the Prometheus text format.This is intended for advanced use cases
        where you have serversexposing Prometheus metrics and need to get them into
        some othersystem.```pythonfrom prometheus_client.parser import text_string_to_metric_familiesfor
        family in text_string_to_metric_families(u"my_gauge 1.0\n"):  for sample in
        family.samples:    print("Name: {0} Labels: {1} Value: {2}".format(*sample))```##
        Links* [Releases](https://github.com/prometheus/client_python/releases): The
        releases page shows the history of the project and acts as a changelog.* [PyPI](https://pypi.python.org/pypi/prometheus_client)'
      Package: prometheus-client
      Source: pip
      Version: 0.8.0
      Hash: ''
      licenses:
      - BSD-2-Clause
      Title: prometheus-client
      DownloadURL: https://files.pythonhosted.org/packages/3f/0e/554a265ffdc56e1494ef08e18f765b0cdec78797f510c58c45cf37abb4f4/prometheus_client-0.8.0-py2.py3-none-any.whl
  bazaar:
    register: 'no'
    prim: 7/CTX1022203
    community_link: https://github.com/prometheus/client_python
    community_name: https://github.com/prometheus/client_python
    community_url: https://github.com/prometheus/client_python
    component_comment: ''
    component_highlevel_description: Prometheus instrumentation library for Python
      applications
    component_name: Prometheus Python Client
    component_platform: linux
    component_programing_language: Python
    component_version: 0.8.0
    licenses:
    - FAL1159004/20 (Apache License 2.0 (Apache-2.0))
    src_download_link: https://github.com/prometheus/client_python/archive/v0.8.0.tar.gz
    stako_decision_reason: allowed
    stako: ESW4
    stako_comment: Product version is older than 18 months. Newer versions exists
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=937144&id-filter=equals&rowDisplay=Card-Simple
    recode: REL
    retext: PRODUCT VERSION IS OLDER THAN 18 MONTHS. NEWER VERSIONS EXISTS
    country: Ireland
    crypto: N/A
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: prometheus-client
    target_sw: linux
    vendor: pip
    version: 0.8.0
    web_url: https://github.com/prometheus/client_python
  licenses:
  - BSD-2-Clause
  - Apache-2.0
  name: prometheus-client
  primary:
  - this
  selected_licenses:
  - Apache-2.0
  subcomponent: false
  type: FOSS
  versions:
  - 0.8.0
  mimer:
    linking: Static
    product_number: CTX1022203
    product_version_label: v0.8.0
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'True'
    selected_licenses:
    - Apache-2.0
  alerts:
  - Stako is 'ESW4', BAZAAR component is not recommended to be used
- ID: protobuf+3.20.3
  additional_info:
    fossa-attribution:
      Description: Protocol Buffers are Google's data interchange format
      Package: protobuf
      Source: pip
      Version: 3.20.3
      Hash: ''
      licenses:
      - BSD-2-Clause
      - BSD-3-Clause
      - Protobuf
      Title: protobuf
      DownloadURL: https://files.pythonhosted.org/packages/55/5b/e3d951e34f8356e5feecacd12a8e3b258a1da6d9a03ad1770f28925f29bc/protobuf-3.20.3.tar.gz
  bazaar:
    register: 'no'
    prim: 74/CAX1054389
    community_link: https://github.com/protocolbuffers/protobuf
    community_name: https://github.com/protocolbuffers/protobuf
    community_url: https://github.com/protocolbuffers/protobuf
    component_comment: ''
    component_highlevel_description: Protocol buffers are Google's language-neutral,
      platform-neutral, extensible mechanism for serializing structured data - think
      XML, but smaller, faster, and simpler. Google uses Protocol Buffers for almost
      all of its internal RPC protocols and file formats.
    component_name: Protocol Buffers (protobuf)
    component_platform: linux
    component_programing_language: C++
    component_version: 3.20.3
    licenses:
    - FAL1159003/2 (BSD 3-Clause (BSD-3-Clause))
    src_download_link: https://github.com/protocolbuffers/protobuf/archive/v3.20.3.tar.gz
    stako_decision_reason: allowed
    stako: ESW3
    stako_comment: Newer versions exists
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1025766&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: United States
    crypto: No Encryption
    programming_language: C++
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: protobuf
    target_sw: linux
    vendor: pip
    version: 3.20.3
    web_url: https://developers.google.com/protocol-buffers/
  licenses:
  - BSD-2-Clause
  - BSD-3-Clause
  - Protobuf
  name: protobuf
  primary:
  - this
  subcomponent: false
  type: FOSS
  versions:
  - 3.20.3
  mimer:
    linking: Static
    product_number: CAX1054389
    product_version_label: v3.20.3
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'True'
    selected_licenses:
    - BSD-3-Clause
  alerts:
  - '''1025766'': Manual set stako_decision_reason: ''allowed'' for stako: ''ESW3'',
    team takes the risk!'
  - '''Protocol Buffers (protobuf)'': Manual set stako_decision_reason: ''allowed''
    for stako: ''ESW3'', team takes the risk!'
- ID: pycparser+2.21
  additional_info:
    fossa-attribution:
      Description: pycparser is a complete parser of the C language, written in        pure
        Python using the PLY parsing library.        It parses C code into an AST
        and can serve as a front-end for        C compilers or analysis tools.
      Package: pycparser
      Source: pip
      Version: '2.21'
      Hash: ''
      licenses:
      - BSD-3-Clause
      - LGPL-3.0-only
      Title: pycparser
      DownloadURL: https://files.pythonhosted.org/packages/5e/0b/95d387f5f4433cb0f53ff7ad859bd2c6051051cebbb564f139a999ab46de/pycparser-2.21.tar.gz
  bazaar:
    register: 'no'
    prim: 8/CAX1058320
    community_link: https://github.com/eliben/pycparser
    community_name: https://github.com/eliben/pycparser
    community_url: https://github.com/eliben/pycparser
    component_comment: ''
    component_highlevel_description: "C parser in Python\npycparser is a complete
      parser of the C language, written in\n        pure Python using the PLY parsing
      library.\n        It parses C code into an AST and can serve as a front-end
      for\n        C compilers or analysis tools."
    component_name: pycparser, Python
    component_platform: linux
    component_programing_language: Python
    component_version: '2.21'
    licenses:
    - FAL1159003/2 (BSD 3-Clause (BSD-3-Clause))
    src_download_link: https://github.com/eliben/pycparser/archive/release_v2.21.tar.gz
    stako_decision_reason: allowed
    stako: ESW3
    stako_comment: Product version is older than 18 months
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=991723&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: United States
    crypto: 'NO'
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: pycparser
    target_sw: linux
    vendor: pip
    version: '2.21'
    web_url: https://github.com/eliben/pycparser
  licenses:
  - BSD-3-Clause
  - LGPL-3.0-only
  name: pycparser
  primary:
  - this
  subcomponent: false
  type: FOSS
  versions:
  - '2.21'
  mimer:
    linking: Static
    product_number: CAX1058320
    product_version_label: release_v2.21
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'True'
    selected_licenses:
    - BSD-3-Clause
  alerts:
  - '''pycparser, Python'': Manual set stako_decision_reason: ''allowed'' for stako:
    ''ESW3'', team takes the risk!'
  - '''991723'': Manual set stako_decision_reason: ''allowed'' for stako: ''ESW3'',
    team takes the risk!'
- ID: pyrsistent+0.19.3
  additional_info:
    fossa-attribution:
      Description: "Pyrsistent==========.. image:: https://github.com/tobgu/pyrsistent/actions/workflows/tests.yaml/badge.svg
        \   :target: https://github.com/tobgu/pyrsistent/actions/workflows/tests.yaml..
        _Pyrthon: https://www.github.com/tobgu/pyrthon.. _Pyrsistent_extras: https://github.com/mingmingrr/pyrsistent-extrasPyrsistent
        is a number of persistent collections (by some referred to as functional data
        structures). Persistent inthe sense that they are immutable.All methods on
        a data structure that would normally mutate it instead return a new copy of
        the structure containing therequested updates. The original structure is left
        untouched.This will simplify the reasoning about what a program does since
        no hidden side effects ever can take place to thesedata structures. You can
        rest assured that the object you hold a reference to will remain the same
        throughout itslifetime and need not worry that somewhere five stack levels
        below you in the darkest corner of your applicationsomeone has decided to
        remove that element that you expected to be there.Pyrsistent is influenced
        by persistent data structures such as those found in the standard library
        of Clojure. Thedata structures are designed to share common elements through
        path copying.It aims at taking these concepts and make them as pythonic as
        possible so that they can be easily integrated into any pythonprogram without
        hassle.If you want use literal syntax to define them in your code ratherthan
        function calls check out Pyrthon_. Be aware, that one is experimental, unmaintained
        and alpha software. If you cannot find the persistent data structure you're
        looking for here you may want to take a look atPyrsistent_extras_ which is
        maintained by @mingmingrr. If you still don't find what you're looking for
        pleaseopen an issue for discussion. If we agree that functionality is missing
        you may want to go ahead and createa Pull Request implement the missing functionality.Examples--------..
        _Sequence: collections_.. _Hashable: collections_.. _Mapping: collections_..
        _Mappings: collections_.. _Set: collections_.. _collections: https://docs.python.org/3/library/collections.abc.html..
        _documentation: http://pyrsistent.readthedocs.org/The collection types and
        key features currently implemented are:* PVector_, similar to a python list*
        PMap_, similar to dict* PSet_, similar to set* PRecord_, a PMap on steroids
        with fixed fields, optional type and invariant checking and much more* PClass_,
        a Python class fixed fields, optional type and invariant checking and much
        more* `Checked collections`_, PVector, PMap and PSet with optional type and
        invariance checks and more* PBag, similar to collections.Counter* PList, a
        classic singly linked list* PDeque, similar to collections.deque* Immutable
        object type (immutable) built on the named tuple* freeze_ and thaw_ functions
        to convert between pythons standard collections and pyrsistent collections.*
        Flexible transformations_ of arbitrarily complex structures built from PMaps
        and PVectors.Below are examples of common usage patterns for some of the structures
        and features. More information andfull documentation for all data structures
        is available in the documentation_... _PVector:PVector~~~~~~~With full support
        for the Sequence_ protocol PVector is meant as a drop in replacement to the
        built in list from a readerspoint of view. Write operations of course differ
        since no in place mutation is done but naming should be in linewith corresponding
        operations on the built in list.Support for the Hashable_ protocol also means
        that it can be used as key in Mappings_.Appends are amortized O(1). Random
        access and insert is log32(n) where n is the size of the vector... code::
        python    >>> from pyrsistent import v, pvector    # No mutation of vectors
        once created, instead they    # are \"evolved\" leaving the original untouched
        \   >>> v1 = v(1, 2, 3)    >>> v2 = v1.append(4)    >>> v3 = v2.set(1, 5)
        \   >>> v1    pvector([1, 2, 3])    >>> v2    pvector([1, 2, 3, 4])    >>>
        v3    pvector([1, 5, 3, 4])    # Random access and slicing    >>> v3[1]    5
        \   >>> v3[1:3]    pvector([5, 3])    # Iteration    >>> list(x + 1 for x
        in v3)    [2, 6, 4, 5]    >>> pvector(2 * x for x in range(3))    pvector([0,
        2, 4]).. _PMap:PMap~~~~With full support for the Mapping_ protocol PMap is
        meant as a drop in replacement to the built in dict from a readers pointof
        view. Support for the Hashable_ protocol also means that it can be used as
        key in other Mappings_.Random access and insert is log32(n) where n is the
        size of the map... code:: python    >>> from pyrsistent import m, pmap, v
        \   # No mutation of maps once created, instead they are    # \"evolved\"
        leaving the original untouched    >>> m1 = m(a=1, b=2)    >>> m2 = m1.set('c',
        3)    >>> m3 = m2.set('a', 5)    >>> m1    pmap({'a': 1, 'b': 2})    >>> m2
        \   pmap({'a': 1, 'c': 3, 'b': 2})    >>> m3    pmap({'a': 5, 'c': 3, 'b':
        2})    >>> m3['a']    5    # Evolution of nested persistent structures    >>>
        m4 = m(a=5, b=6, c=v(1, 2))    >>> m4.transform(('c', 1), 17)    pmap({'a':
        5, 'c': pvector([1, 17]), 'b': 6})    >>> m5 = m(a=1, b=2)    # Evolve by
        merging with other mappings    >>> m5.update(m(a=2, c=3), {'a': 17, 'd': 35})
        \   pmap({'a': 17, 'c': 3, 'b': 2, 'd': 35})    >>> pmap({'x': 1, 'y': 2})
        + pmap({'y': 3, 'z': 4})    pmap({'y': 3, 'x': 1, 'z': 4})    # Dict-like
        methods to convert to list and iterate    >>> m3.items()    pvector([('a',
        5), ('c', 3), ('b', 2)])    >>> list(m3)    ['a', 'c', 'b'].. _PSet:PSet~~~~With
        full support for the Set_ protocol PSet is meant as a drop in replacement
        to the built in set from a readers pointof view. Support for the Hashable_
        protocol also means that it can be used as key in Mappings_.Random access
        and insert is log32(n) where n is the size of the set... code:: python    >>>
        from pyrsistent import s    # No mutation of sets once created, you know the
        story...    >>> s1 = s(1, 2, 3, 2)    >>> s2 = s1.add(4)    >>> s3 = s1.remove(1)
        \   >>> s1    pset([1, 2, 3])    >>> s2    pset([1, 2, 3, 4])    >>> s3    pset([2,
        3])    # Full support for set operations    >>> s1 | s(3, 4, 5)    pset([1,
        2, 3, 4, 5])    >>> s1 & s(3, 4, 5)    pset([3])    >>> s1 < s2    True    >>>
        s1 < s(3, 4, 5)    False.. _PRecord:PRecord~~~~~~~A PRecord is a PMap with
        a fixed set of specified fields. Records are declared as python classes inheritingfrom
        PRecord. Because it is a PMap it has full support for all Mapping methods
        such as iteration and elementaccess using subscript notation... code:: python
        \   >>> from pyrsistent import PRecord, field    >>> class ARecord(PRecord):
        \   ...     x = field()    ...    >>> r = ARecord(x=3)    >>> r    ARecord(x=3)
        \   >>> r.x    3    >>> r.set(x=2)    ARecord(x=2)    >>> r.set(y=2)    Traceback
        (most recent call last):    AttributeError: 'y' is not among the specified
        fields for ARecordType information****************It is possible to add type
        information to the record to enforce type checks. Multiple allowed types can
        be specifiedby providing an iterable of types... code:: python    >>> class
        BRecord(PRecord):    ...     x = field(type=int)    ...     y = field(type=(int,
        type(None)))    ...    >>> BRecord(x=3, y=None)    BRecord(y=None, x=3)    >>>
        BRecord(x=3.0)    Traceback (most recent call last):    PTypeError: Invalid
        type for field BRecord.x, was floatCustom types (classes) that are iterable
        should be wrapped in a tuple to prevent theirmembers being added to the set
        of valid types.  Although Enums in particular are nowsupported without wrapping,
        see #83 for more information.Mandatory fields****************Fields are not
        mandatory by default but can be specified as such. If fields are missing an*InvariantException*
        will be thrown which contains information about the missing fields... code::
        python    >>> from pyrsistent import InvariantException    >>> class CRecord(PRecord):
        \   ...     x = field(mandatory=True)    ...    >>> r = CRecord(x=3)    >>>
        try:    ...    r.discard('x')    ... except InvariantException as e:    ...
        \   print(e.missing_fields)    ...    ('CRecord.x',)Invariants**********It
        is possible to add invariants that must hold when evolving the record. Invariants
        can bespecified on both field and record level. If invariants fail an *InvariantException*
        will bethrown which contains information about the failing invariants. An
        invariant function shouldreturn a tuple consisting of a boolean that tells
        if the invariant holds or not and an objectdescribing the invariant. This
        object can later be used to identify which invariant that failed.The global
        invariant function is only executed if all field invariants hold.Global invariants
        are inherited to subclasses... code:: python    >>> class RestrictedVector(PRecord):
        \   ...     __invariant__ = lambda r: (r.y >= r.x, 'x larger than y')    ...
        \    x = field(invariant=lambda x: (x > 0, 'x negative'))    ...     y = field(invariant=lambda
        y: (y > 0, 'y negative'))    ...    >>> r = RestrictedVector(y=3, x=2)    >>>
        try:    ...    r.set(x=-1, y=-2)    ... except InvariantException as e:    ...
        \   print(e.invariant_errors)    ...    ('y negative', 'x negative')    >>>
        try:    ...    r.set(x=2, y=1)    ... except InvariantException as e:    ...
        \   print(e.invariant_errors)    ...    ('x larger than y',)Invariants may
        also contain multiple assertions. For those cases the invariant function shouldreturn
        a tuple of invariant tuples as described above. This structure is reflected
        in theinvariant_errors attribute of the exception which will contain tuples
        with data from all failedinvariants. Eg:.. code:: python    >>> class EvenX(PRecord):
        \   ...     x = field(invariant=lambda x: ((x > 0, 'x negative'), (x % 2 ==
        0, 'x odd')))    ...    >>> try:    ...    EvenX(x=-1)    ... except InvariantException
        as e:    ...    print(e.invariant_errors)    ...    (('x negative', 'x odd'),)Factories*********It's
        possible to specify factory functions for fields. The factory function receives
        whateveris supplied as field value and the actual returned by the factory
        is assigned to the fieldgiven that any type and invariant checks hold.PRecords
        have a default factory specified as a static function on the class, create().
        It takesa *Mapping* as argument and returns an instance of the specific record.If
        a record has fields of type PRecord the create() method of that record willbe
        called to create the \"sub record\" if no factory has explicitly been specified
        to overridethis behaviour... code:: python    >>> class DRecord(PRecord):
        \   ...     x = field(factory=int)    ...    >>> class ERecord(PRecord):    ...
        \    d = field(type=DRecord)    ...    >>> ERecord.create({'d': {'x': '1'}})
        \   ERecord(d=DRecord(x=1))Collection fields*****************It is also possible
        to have fields with ``pyrsistent`` collections... code:: python   >>> from
        pyrsistent import pset_field, pmap_field, pvector_field   >>> class MultiRecord(PRecord):
        \  ...     set_of_ints = pset_field(int)   ...     map_int_to_str = pmap_field(int,
        str)   ...     vector_of_strs = pvector_field(str)   ...Serialization*************PRecords
        support serialization back to dicts. Default serialization will take keys
        and values\"as is\" and output them into a dict. It is possible to specify
        custom serialization functionsto take care of fields that require special
        treatment... code:: python    >>> from datetime import date    >>> class Person(PRecord):
        \   ...     name = field(type=unicode)    ...     birth_date = field(type=date,
        \   ...                        serializer=lambda format, d: d.strftime(format['date']))
        \   ...    >>> john = Person(name=u'John', birth_date=date(1985, 10, 21))
        \   >>> john.serialize({'date': '%Y-%m-%d'})    {'birth_date': '1985-10-21',
        'name': u'John'}.. _instar: https://github.com/boxed/instar/.. _PClass:PClass~~~~~~A
        PClass is a python class with a fixed set of specified fields. PClasses are
        declared as python classes inheritingfrom PClass. It is defined the same way
        that PRecords are and behaves like a PRecord in all aspects except that itis
        not a PMap and hence not a collection but rather a plain Python object...
        code:: python    >>> from pyrsistent import PClass, field    >>> class AClass(PClass):
        \   ...     x = field()    ...    >>> a = AClass(x=3)    >>> a    AClass(x=3)
        \   >>> a.x    3Checked collections~~~~~~~~~~~~~~~~~~~Checked collections
        currently come in three flavors: CheckedPVector, CheckedPMap and CheckedPSet...
        code:: python    >>> from pyrsistent import CheckedPVector, CheckedPMap, CheckedPSet,
        thaw    >>> class Positives(CheckedPSet):    ...     __type__ = (long, int)
        \   ...     __invariant__ = lambda n: (n >= 0, 'Negative')    ...    >>> class
        Lottery(PRecord):    ...     name = field(type=str)    ...     numbers = field(type=Positives,
        invariant=lambda p: (len(p) > 0, 'No numbers'))    ...    >>> class Lotteries(CheckedPVector):
        \   ...     __type__ = Lottery    ...    >>> class LotteriesByDate(CheckedPMap):
        \   ...     __key_type__ = date    ...     __value_type__ = Lotteries    ...
        \   >>> lotteries = LotteriesByDate.create({date(2015, 2, 15): [{'name': 'SuperLotto',
        'numbers': {1, 2, 3}},    ...                                                         {'name':
        'MegaLotto',  'numbers': {4, 5, 6}}],    ...                                     date(2015,
        2, 16): [{'name': 'SuperLotto', 'numbers': {3, 2, 1}},    ...                                                         {'name':
        'MegaLotto',  'numbers': {6, 5, 4}}]})    >>> lotteries    LotteriesByDate({datetime.date(2015,
        2, 15): Lotteries([Lottery(numbers=Positives([1, 2, 3]), name='SuperLotto'),
        Lottery(numbers=Positives([4, 5, 6]), name='MegaLotto')]), datetime.date(2015,
        2, 16): Lotteries([Lottery(numbers=Positives([1, 2, 3]), name='SuperLotto'),
        Lottery(numbers=Positives([4, 5, 6]), name='MegaLotto')])})    # The checked
        versions support all operations that the corresponding    # unchecked types
        do    >>> lottery_0215 = lotteries[date(2015, 2, 15)]    >>> lottery_0215.transform([0,
        'name'], 'SuperDuperLotto')    Lotteries([Lottery(numbers=Positives([1, 2,
        3]), name='SuperDuperLotto'), Lottery(numbers=Positives([4, 5, 6]), name='MegaLotto')])
        \   # But also makes asserts that types and invariants hold    >>> lottery_0215.transform([0,
        'name'], 999)    Traceback (most recent call last):    PTypeError: Invalid
        type for field Lottery.name, was int    >>> lottery_0215.transform([0, 'numbers'],
        set())    Traceback (most recent call last):    InvariantException: Field
        invariant failed    # They can be converted back to python built ins with
        either thaw()    # or serialize() (which provides possibilities to customize
        serialization)    >>> thaw(lottery_0215)    [{'numbers': set([1, 2, 3]), 'name':
        'SuperLotto'}, {'numbers': set([4, 5, 6]), 'name': 'MegaLotto'}]    >>> lottery_0215.serialize()
        \   [{'numbers': set([1, 2, 3]), 'name': 'SuperLotto'}, {'numbers': set([4,
        5, 6]), 'name': 'MegaLotto'}].. _transformations:Transformations~~~~~~~~~~~~~~~Transformations
        are inspired by the cool library instar_ for Clojure. They let you evolve
        PMaps and PVectorswith arbitrarily deep/complex nesting using simple syntax
        and flexible matching syntax.The first argument to transformation is the path
        that points out the value to transform. Thesecond is the transformation to
        perform. If the transformation is callable it will be appliedto the value(s)
        matching the path. The path may also contain callables. In that case they
        aretreated as matchers. If the matcher returns True for a specific key it
        is considered for transformation... code:: python    # Basic examples    >>>
        from pyrsistent import inc, freeze, thaw, rex, ny, discard    >>> v1 = freeze([1,
        2, 3, 4, 5])    >>> v1.transform([2], inc)    pvector([1, 2, 4, 4, 5])    >>>
        v1.transform([lambda ix: 0 < ix < 4], 8)    pvector([1, 8, 8, 8, 5])    >>>
        v1.transform([lambda ix, v: ix == 0 or v == 5], 0)    pvector([0, 2, 3, 4,
        0])    # The (a)ny matcher can be used to match anything    >>> v1.transform([ny],
        8)    pvector([8, 8, 8, 8, 8])    # Regular expressions can be used for matching
        \   >>> scores = freeze({'John': 12, 'Joseph': 34, 'Sara': 23})    >>> scores.transform([rex('^Jo')],
        0)    pmap({'Joseph': 0, 'Sara': 23, 'John': 0})    # Transformations can
        be done on arbitrarily deep structures    >>> news_paper = freeze({'articles':
        [{'author': 'Sara', 'content': 'A short article'},    ...                                   {'author':
        'Steve', 'content': 'A slightly longer article'}],    ...                      'weather':
        {'temperature': '11C', 'wind': '5m/s'}})    >>> short_news = news_paper.transform(['articles',
        ny, 'content'], lambda c: c[:25] + '...' if len(c) > 25 else c)    >>> very_short_news
        = news_paper.transform(['articles', ny, 'content'], lambda c: c[:15] + '...'
        if len(c) > 15 else c)    >>> very_short_news.articles[0].content    'A short
        article'    >>> very_short_news.articles[1].content    'A slightly long...'
        \   # When nothing has been transformed the original data structure is kept
        \   >>> short_news is news_paper    True    >>> very_short_news is news_paper
        \   False    >>> very_short_news.articles[0] is news_paper.articles[0]    True
        \   # There is a special transformation that can be used to discard elements.
        Also    # multiple transformations can be applied in one call    >>> thaw(news_paper.transform(['weather'],
        discard, ['articles', ny, 'content'], discard))    {'articles': [{'author':
        'Sara'}, {'author': 'Steve'}]}Evolvers~~~~~~~~PVector, PMap and PSet all have
        support for a concept dubbed *evolvers*. An evolver acts like a mutableview
        of the underlying persistent data structure with \"transaction like\" semantics.
        No updates of the originaldata structure is ever performed, it is still fully
        immutable.The evolvers have a very limited API by design to discourage excessive,
        and inappropriate, usage as that wouldtake us down the mutable road. In principle
        only basic mutation and element access functions are supported.Check out the
        documentation_ of each data structure for specific examples.Examples of when
        you may want to use an evolver instead of working directly with the data structure
        include:* Multiple updates are done to the same data structure and the intermediate
        results are of no  interest. In this case using an evolver may be a more efficient
        and easier to work with.* You need to pass a vector into a legacy function
        or a function that you have no control  over which performs in place mutations.
        In this case pass an evolver instance  instead and then create a new pvector
        from the evolver once the function returns... code:: python    >>> from pyrsistent
        import v    # In place mutation as when working with the built in counterpart
        \   >>> v1 = v(1, 2, 3)    >>> e = v1.evolver()    >>> e[1] = 22    >>> e
        = e.append(4)    >>> e = e.extend([5, 6])    >>> e[5] += 1    >>> len(e)    6
        \   # The evolver is considered *dirty* when it contains changes compared
        to the underlying vector    >>> e.is_dirty()    True    # But the underlying
        pvector still remains untouched    >>> v1    pvector([1, 2, 3])    # Once
        satisfied with the updates you can produce a new pvector containing the updates.
        \   # The new pvector will share data with the original pvector in the same
        way that would have    # been done if only using operations on the pvector.
        \   >>> v2 = e.persistent()    >>> v2    pvector([1, 22, 3, 4, 5, 7])    #
        The evolver is now no longer considered *dirty* as it contains no differences
        compared to the    # pvector just produced.    >>> e.is_dirty()    False    #
        You may continue to work with the same evolver without affecting the content
        of v2    >>> e[0] = 11    # Or create a new evolver from v2. The two evolvers
        can be updated independently but will both    # share data with v2 where possible.
        \   >>> e2 = v2.evolver()    >>> e2[0] = 1111    >>> e.persistent()    pvector([11,
        22, 3, 4, 5, 7])    >>> e2.persistent()    pvector([1111, 22, 3, 4, 5, 7])..
        _freeze:.. _thaw:freeze and thaw~~~~~~~~~~~~~~~These functions are great when
        your cozy immutable world has to interact with the evil mutable world outside...
        code:: python    >>> from pyrsistent import freeze, thaw, v, m    >>> freeze([1,
        {'a': 3}])    pvector([1, pmap({'a': 3})])    >>> thaw(v(1, m(a=3)))    [1,
        {'a': 3}]By default, freeze will also recursively convert values inside PVectors
        and PMaps. This behaviour can be changed by providing freeze with the flag
        strict=False... code:: python    >>> from pyrsistent import freeze, v, m    >>>
        freeze(v(1, v(2, [3])))    pvector([1, pvector([2, pvector([3])])])    >>>
        freeze(v(1, v(2, [3])), strict=False)    pvector([1, pvector([2, [3]])])    >>>
        freeze(m(a=m(b={'c': 1})))    pmap({'a': pmap({'b': pmap({'c': 1})})})    >>>
        freeze(m(a=m(b={'c': 1})), strict=False)    pmap({'a': pmap({'b': {'c': 1}})})In
        this regard, thaw operates as the inverse of freeze so will thaw values inside
        native data structures unless passed the strict=False flag.Compatibility-------------Pyrsistent
        is developed and tested on Python 3.7+ and PyPy3.Performance-----------Pyrsistent
        is developed with performance in mind. Still, while some operations are nearly
        on par with their built in,mutable, counterparts in terms of speed, other
        operations are slower. In the cases where attempts atoptimizations have been
        done, speed has generally been valued over space.Pyrsistent comes with two
        API compatible flavors of PVector (on which PMap and PSet are based), one
        pure Pythonimplementation and one implemented as a C extension. The latter
        generally being 2 - 20 times faster than the former.The C extension will be
        used automatically when possible.The pure python implementation is fully PyPy
        compatible. Running it under PyPy speeds operations up considerably ifthe
        structures are used heavily (if JITed), for some cases the performance is
        almost on par with the built in counterparts.Type hints----------PEP 561 style
        type hints for use with mypy and various editors are available for most types
        and functions in pyrsistent.Type classes for annotating your own code with
        pyrsistent types are also available under pyrsistent.typing.Installation------------pip
        install pyrsistentDocumentation-------------Available at http://pyrsistent.readthedocs.org/Brief
        presentation available at http://slides.com/tobiasgustafsson/immutability-and-python/Contributors------------Tobias
        Gustafsson https://github.com/tobguChristopher Armstrong https://github.com/radixAnders
        Hovm\xF6ller https://github.com/boxedItamar Turner-Trauring https://github.com/itamarstJonathan
        Lange https://github.com/jmlRichard Futrell https://github.com/FutrellJakob
        Hollenstein https://github.com/jkbjhDavid Honour https://github.com/foolswoodDavid
        R. MacIver https://github.com/DRMacIverMarcus Ewert https://github.com/sarum90Jean-Paul
        Calderone https://github.com/exarkunDouglas Treadwell https://github.com/douglas-treadwellTravis
        Parker https://github.com/teeparkJulian Berman https://github.com/JulianDennis
        Tomas https://github.com/dtomasNeil Vyas https://github.com/neilvyasdoozr
        https://github.com/doozrKamil Galuszka https://github.com/galuszkakTsuyoshi
        Hombashi https://github.com/thombashinattofriends https://github.com/nattofriendsagberk
        https://github.com/agberkWaleed Khan https://github.com/arxanasJean-Louis
        Fuchs https://github.com/ganwellCarlos Corbacho https://github.com/ccorbachoFelix
        Yan https://github.com/felixonmarsbenrg https://github.com/benrgJere Lahelma
        https://github.com/je-lMax Taggart https://github.com/MaxTaggartVincent Philippon
        https://github.com/vphilipponSemen Zhydenko https://github.com/ss18Till Varoquaux
        \ https://github.com/till-varoquauxMichal Kowalik https://github.com/michalviossdev07
        https://github.com/ossdev07Kerry Olesen https://github.com/qheszjohnthagen
        https://github.com/johnthagenBastien Vallet https://github.com/djaillaRam
        Rachum  https://github.com/cool-RRVincent Philippon https://github.com/vphilipponAndrey
        Bienkowski https://github.com/hexagonrecursionEthan McCue https://github.com/bowbahdoeJason
        R. Coombs https://github.com/jaracoNathan https://github.com/ndowensGeert
        Barentsen https://github.com/barentsenphil-arh https://github.com/phil-arhTam\xE1s
        Nepusz https://github.com/ntamasHugo van Kemenade https://github.com/hugovkBen
        Beasley https://github.com/musicinmybrainNoah C. Benson https://github.com/noahbensondscrofts
        https://github.com/dscroftsAndy Reagan https://github.com/andyreaganAaron
        Durant https://github.com/Aaron-DurantContributing------------Want to contribute?
        That's great! If you experience problems please log them on GitHub. If you
        want to contribute code,please fork the repository and submit a pull request.Run
        tests~~~~~~~~~.. _tox: https://tox.readthedocs.io/en/latest/Tests can be executed
        using tox_.Install tox: ``pip install tox``Run test for Python 3.8: ``tox
        -e py38``Release~~~~~~~* `pip install -r requirements.txt`* Update CHANGES.txt*
        Update README.rst with any new contributors and potential info needed.* Update
        _pyrsistent_version.py* Commit and tag with new version: `git add -u . &&
        git commit -m 'Prepare version vX.Y.Z' && git tag -a vX.Y.Z -m 'vX.Y.Z'`*
        Push commit and tags: `git push --follow-tags`* Build new release using Github
        actionsProject status--------------Pyrsistent can be considered stable and
        mature (who knows, there may even be a 1.0 some day :-)). The project ismaintained,
        bugs fixed, PRs reviewed and merged and new releases made. I currently do
        not have time for developmentof new features or functionality which I don't
        have use for myself. I'm more than happy to take PRs for newfunctionality
        though!There are a bunch of issues marked with ``enhancement`` and ``help
        wanted`` that contain requests for new functionalitythat would be nice to
        include. The level of difficulty and extend of the issues varies, please reach
        out to me if you'reinterested in working on any of them.If you feel that you
        have a grand master plan for where you would like Pyrsistent to go and have
        the time to put intoit please don't hesitate to discuss this with me and submit
        PRs for it. If all goes well I'd be more than happy to addadditional maintainers
        to the project!"
      Package: pyrsistent
      Source: pip
      Version: 0.19.3
      Hash: ''
      licenses:
      - BSD-3-Clause
      - MIT
      Title: pyrsistent
      DownloadURL: https://files.pythonhosted.org/packages/bf/90/445a7dbd275c654c268f47fa9452152709134f61f09605cf776407055a89/pyrsistent-0.19.3.tar.gz
  bazaar:
    register: 'no'
    prim: 13/CTX1023943
    community_link: https://github.com/tobgu/pyrsistent
    community_name: https://github.com/tobgu/pyrsistent
    community_url: https://github.com/tobgu/pyrsistent
    component_comment: ''
    component_highlevel_description: Pyrsistent is a number of persistent collections
      (by some referred to as functional data structures). Persistent in the sense
      that they are immutable.
    component_name: Pyrsistent
    component_platform: linux
    component_programing_language: Python
    component_version: V0.19.3
    licenses:
    - FAL1159008 (MIT License (MIT))
    src_download_link: https://github.com/tobgu/pyrsistent/archive/v0.19.3.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1035629&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: Sweden
    crypto: No Encryption
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: pyrsistent
    target_sw: linux
    vendor: pip
    version: 0.19.3
    web_url: https://github.com/tobgu/pyrsistent/
  licenses:
  - BSD-3-Clause
  - MIT
  name: pyrsistent
  primary:
  - this
  selected_licenses:
  - MIT
  subcomponent: false
  type: FOSS
  versions:
  - 0.19.3
  mimer:
    linking: Static
    product_number: CTX1023943
    product_version_label: v0.19.3
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'True'
    selected_licenses:
    - MIT
- ID: PyYAML+5.4.1
  additional_info:
    fossa-attribution:
      Description: YAML is a data serialization format designed for human readabilityand
        interaction with scripting languages.  PyYAML is a YAML parserand emitter
        for Python.PyYAML features a complete YAML 1.1 parser, Unicode support, picklesupport,
        capable extension API, and sensible error messages.  PyYAMLsupports standard
        YAML tags and provides Python-specific tags thatallow to represent an arbitrary
        Python object.PyYAML is applicable for a broad range of tasks from complexconfiguration
        files to object serialization and persistence.
      Package: PyYAML
      Source: pip
      Version: 5.4.1
      Hash: ''
      licenses:
      - MIT
      Title: PyYAML
      DownloadURL: https://files.pythonhosted.org/packages/42/c5/440fd6200c345c3d522fbe47a52558733c4661aac3c8cf06b7de31bababd/PyYAML-5.4.1-cp27-cp27m-macosx_10_9_x86_64.whl
  bazaar:
    register: 'no'
    prim: 12/CAX1056382
    community_link: https://github.com/yaml/pyyaml
    community_name: https://github.com/yaml/pyyaml
    community_url: https://github.com/yaml/pyyaml
    component_comment: ''
    component_highlevel_description: PyYAML is the YAML parser and emitter for Python.
    component_name: PyYAML
    component_platform: linux
    component_programing_language: Python
    component_version: 5.4.1
    licenses:
    - FAL1159008 (MIT License (MIT))
    src_download_link: https://github.com/yaml/pyyaml/archive/5.4.1.zip
    stako_decision_reason: allowed
    stako: ESW4
    stako_comment: Product version is older than 18 months. Newer versions exists
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=953940&id-filter=equals&rowDisplay=Card-Simple
    recode: REL
    retext: PRODUCT VERSION IS OLDER THAN 18 MONTHS. NEWER VERSIONS EXISTS
    country: United States
    crypto: No Encryption
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: PyYAML
    target_sw: linux
    vendor: pip
    version: 5.4.1
    web_url: https://pyyaml.org/
  licenses:
  - MIT
  name: PyYAML
  primary:
  - this
  subcomponent: false
  type: FOSS
  versions:
  - 5.4.1
  mimer:
    linking: Static
    product_number: CAX1056382
    product_version_label: 5.4.1
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'True'
  alerts:
  - Stako is 'ESW4', BAZAAR component is not recommended to be used
- ID: requests+2.31.0
  additional_info:
    fossa-attribution:
      Description: "# Requests**Requests** is a simple, yet elegant, HTTP library.```python>>>
        import requests>>> r = requests.get('https://httpbin.org/basic-auth/user/pass',
        auth=('user', 'pass'))>>> r.status_code200>>> r.headers['content-type']'application/json;
        charset=utf8'>>> r.encoding'utf-8'>>> r.text'{\"authenticated\": true, ...'>>>
        r.json(){'authenticated': True, ...}```Requests allows you to send HTTP/1.1
        requests extremely easily. There\u2019s no need to manually add query strings
        to your URLs, or to form-encode your `PUT` & `POST` data \u2014 but nowadays,
        just use the `json` method!Requests is one of the most downloaded Python packages
        today, pulling in around `30M downloads / week`\u2014 according to GitHub,
        Requests is currently [depended upon](https://github.com/psf/requests/network/dependents?package_id=UGFja2FnZS01NzA4OTExNg%3D%3D)
        by `1,000,000+` repositories. You may certainly put your trust in this code.[![Downloads](https://pepy.tech/badge/requests/month)](https://pepy.tech/project/requests)[![Supported
        Versions](https://img.shields.io/pypi/pyversions/requests.svg)](https://pypi.org/project/requests)[![Contributors](https://img.shields.io/github/contributors/psf/requests.svg)](https://github.com/psf/requests/graphs/contributors)##
        Installing Requests and Supported VersionsRequests is available on PyPI:```console$
        python -m pip install requests```Requests officially supports Python 3.7+.##
        Supported Features & Best\u2013PracticesRequests is ready for the demands
        of building robust and reliable HTTP\u2013speaking applications, for the needs
        of today.- Keep-Alive & Connection Pooling- International Domains and URLs-
        Sessions with Cookie Persistence- Browser-style TLS/SSL Verification- Basic
        & Digest Authentication- Familiar `dict`\u2013like Cookies- Automatic Content
        Decompression and Decoding- Multi-part File Uploads- SOCKS Proxy Support-
        Connection Timeouts- Streaming Downloads- Automatic honoring of `.netrc`-
        Chunked HTTP Requests## API Reference and User Guide available on [Read the
        Docs](https://requests.readthedocs.io)[![Read the Docs](https://raw.githubusercontent.com/psf/requests/main/ext/ss.png)](https://requests.readthedocs.io)##
        Cloning the repositoryWhen cloning the Requests repository, you may need to
        add the `-cfetch.fsck.badTimezone=ignore` flag to avoid an error about a bad
        commit (see[this issue](https://github.com/psf/requests/issues/2690) for more
        background):```shellgit clone -c fetch.fsck.badTimezone=ignore https://github.com/psf/requests.git```You
        can also apply this setting to your global Git config:```shellgit config --global
        fetch.fsck.badTimezone ignore```---[![Kenneth Reitz](https://raw.githubusercontent.com/psf/requests/main/ext/kr.png)](https://kennethreitz.org)
        [![Python Software Foundation](https://raw.githubusercontent.com/psf/requests/main/ext/psf.png)](https://www.python.org/psf)"
      Package: requests
      Source: pip
      Version: 2.31.0
      Hash: ''
      licenses:
      - Apache-2.0
      Title: requests
      DownloadURL: https://files.pythonhosted.org/packages/9d/be/10918a2eac4ae9f02f6cfe6414b7a155ccd8f7f9d4380d62fd5b955065c3/requests-2.31.0.tar.gz
  bazaar:
    register: 'no'
    prim: 42/CAX1056548
    community_link: https://github.com/psf/requests
    community_name: https://github.com/psf/requests
    community_url: https://github.com/psf/requests
    component_comment: ''
    component_highlevel_description: Requests is the only *Non-GMO* HTTP library for
      Python, safe for human consumption.
    component_name: Requests, Python
    component_platform: linux
    component_programing_language: Python
    component_version: 2.31.0
    licenses:
    - FAL1159004/20 (Apache License 2.0 (Apache-2.0))
    src_download_link: https://files.pythonhosted.org/packages/9d/be/10918a2eac4ae9f02f6cfe6414b7a155ccd8f7f9d4380d62fd5b955065c3/requests-2.31.0.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1047952&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: United States
    crypto: 'NO'
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: requests
    target_sw: linux
    vendor: pip
    version: 2.31.0
    web_url: https://requests.readthedocs.io
  licenses:
  - Apache-2.0
  name: requests
  primary:
  - this
  subcomponent: false
  type: FOSS
  versions:
  - 2.31.0
  mimer:
    linking: Static
    product_number: CAX1056548
    product_version_label: 2.31.0
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'True'
- ID: seldon-core+1.17.1
  additional_info:
    fossa-attribution:
      Description: The fossa information is fetched from  FOSSA service. Don't Edit!
      Package: seldon-core
      Source: pip
      Version: 1.17.1
      Hash: ''
      licenses:
      - Apache-2.0
      - BSD-2-Clause
      - BSD-3-Clause
      - GPL-1.0-or-later
      - GPL-3.0-only
      - GPL-3.0-or-later
      - GPL-3.0-with-GCC-exception
      - ISC
      - MIT
      - MPL-2.0
      - NCSA
      - Python-2.0
      - bsd-3-clause-open-mpi
      - flora-1.1
      Title: seldon-core
      DownloadURL: https://files.pythonhosted.org/packages/fe/8b/486773eae1baf4e55f5a70a386dfcbea824116553645199383bbc535124a/seldon-core-1.17.1.tar.gz
  bazaar:
    register: 'no'
    prim: 17/CTX1023825
    community_link: https://github.com/SeldonIO/seldon-core
    community_name: https://github.com/SeldonIO/seldon-core
    community_url: https://github.com/SeldonIO/seldon-core
    component_comment: ''
    component_highlevel_description: An MLOps framework to package, deploy, monitor
      and manage thousands of production machine learning models
    component_name: Seldon Core
    component_platform: linux
    component_programing_language: HTML
    component_version: V1.17.1
    licenses:
    - FAL1159004/20 (Apache License 2.0 (Apache-2.0))
    src_download_link: https://github.com/SeldonIO/seldon-core/archive/v1.17.1.tar.gz
    stako_decision_reason: allowed
    stako: ESW3
    stako_comment: Copyleft license found.
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1059030&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: United Kingdom
    crypto: No Encryption
    programming_language: HTML
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: seldon-core
    target_sw: linux
    vendor: pip
    version: 1.17.1
    web_url: https://github.com/SeldonIO/seldon-core
  licenses:
  - Apache-2.0
  - BSD-2-Clause
  - BSD-3-Clause
  - GPL-1.0-or-later
  - GPL-3.0-only
  - GPL-3.0-or-later
  - GPL-3.0-with-GCC-exception
  - ISC
  - MIT
  - MPL-2.0
  - NCSA
  - Python-2.0
  - bsd-3-clause-open-mpi
  - flora-1.1
  name: seldon-core
  primary:
  - this
  subcomponent: false
  type: FOSS
  versions:
  - 1.17.1
  mimer:
    linking: Static
    product_number: CTX1023825
    product_version_label: 1.17.1
    selected_licenses:
    - Apache-2.0
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'True'
  alerts:
  - Stako is 'ESW3', BAZAAR/SCAS component is not recommended to be used
- ID: setuptools+68.1.2
  additional_info:
    fossa-attribution:
      Description: '.. image:: https://img.shields.io/pypi/v/setuptools.svg   :target:
        https://pypi.org/project/setuptools.. image:: https://img.shields.io/pypi/pyversions/setuptools.svg..
        image:: https://github.com/pypa/setuptools/workflows/tests/badge.svg   :target:
        https://github.com/pypa/setuptools/actions?query=workflow%3A%22tests%22   :alt:
        tests.. image:: https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/charliermarsh/ruff/main/assets/badge/v2.json    :target:
        https://github.com/astral-sh/ruff    :alt: Ruff.. image:: https://img.shields.io/badge/code%20style-black-000000.svg   :target:
        https://github.com/psf/black   :alt: Code style: Black.. image:: https://img.shields.io/readthedocs/setuptools/latest.svg    :target:
        https://setuptools.pypa.io.. image:: https://img.shields.io/badge/skeleton-2023-informational   :target:
        https://blog.jaraco.com/skeleton.. image:: https://img.shields.io/codecov/c/github/pypa/setuptools/master.svg?logo=codecov&logoColor=white   :target:
        https://codecov.io/gh/pypa/setuptools.. image:: https://tidelift.com/badges/github/pypa/setuptools?style=flat   :target:
        https://tidelift.com/subscription/pkg/pypi-setuptools?utm_source=pypi-setuptools&utm_medium=readme..
        image:: https://img.shields.io/discord/803025117553754132   :target: https://discord.com/channels/803025117553754132/815945031150993468   :alt:
        DiscordSee the `Installation Instructions<https://packaging.python.org/installing/>`_
        in the Python PackagingUser''s Guide for instructions on installing, upgrading,
        and uninstallingSetuptools.Questions and comments should be directed to `GitHub
        Discussions<https://github.com/pypa/setuptools/discussions>`_.Bug reports
        and especially tested patches may besubmitted directly to the `bug tracker<https://github.com/pypa/setuptools/issues>`_.Code
        of Conduct===============Everyone interacting in the setuptools project''s
        codebases, issue trackers,chat rooms, and fora is expected to follow the`PSF
        Code of Conduct <https://github.com/pypa/.github/blob/main/CODE_OF_CONDUCT.md>`_.For
        Enterprise==============Available as part of the Tidelift Subscription.Setuptools
        and the maintainers of thousands of other packages are working with Tidelift
        to deliver one enterprise subscription that covers all of the open source
        you use.`Learn more <https://tidelift.com/subscription/pkg/pypi-setuptools?utm_source=pypi-setuptools&utm_medium=referral&utm_campaign=github>`_.'
      Package: setuptools
      Source: pip
      Version: 68.1.2
      Hash: ''
      licenses:
      - Apache-2.0
      - BSD-3-Clause
      - MIT
      - Python-2.0
      Title: setuptools
      DownloadURL: https://files.pythonhosted.org/packages/19/20/d8dd9d8becaf3e2d6fdc17cc41870d5ada5ceda518996cf5968c2ca71bd8/setuptools-68.1.2.tar.gz
  bazaar:
    register: 'no'
    prim: 171/CAX1054853
    community_link: https://pypi.org/project/setuptools
    community_name: https://pypi.org/project/setuptools
    community_url: https://pypi.org/project/setuptools
    component_comment: ''
    component_highlevel_description: Official project repository for the Setuptools
      build system
    component_name: setuptools
    component_platform: linux
    component_programing_language: Python
    component_version: 68.1.2
    licenses:
    - FAL1159008 (MIT License (MIT))
    src_download_link: https://files.pythonhosted.org/packages/19/20/d8dd9d8becaf3e2d6fdc17cc41870d5ada5ceda518996cf5968c2ca71bd8/setuptools-68.1.2.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1057724&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: United States
    crypto: ''
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: setuptools
    target_sw: linux
    vendor: pip
    version: 68.1.2
    web_url: https://github.com/pypa/setuptools
  licenses:
  - Apache-2.0
  - BSD-3-Clause
  - MIT
  - Python-2.0
  name: setuptools
  primary:
  - this
  subcomponent: false
  type: FOSS
  versions:
  - 68.1.2
  mimer:
    linking: Static
    product_number: CAX1054853
    product_version_label: 68.1.2
    selected_licenses:
    - MIT
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'True'
- ID: six+1.16.0
  additional_info:
    fossa-attribution:
      Description: '.. image:: https://img.shields.io/pypi/v/six.svg   :target: https://pypi.org/project/six/   :alt:
        six on PyPI.. image:: https://travis-ci.org/benjaminp/six.svg?branch=master   :target:
        https://travis-ci.org/benjaminp/six   :alt: six on TravisCI.. image:: https://readthedocs.org/projects/six/badge/?version=latest   :target:
        https://six.readthedocs.io/   :alt: six''s documentation on Read the Docs..
        image:: https://img.shields.io/badge/license-MIT-green.svg   :target: https://github.com/benjaminp/six/blob/master/LICENSE   :alt:
        MIT License badgeSix is a Python 2 and 3 compatibility library.  It provides
        utility functionsfor smoothing over the differences between the Python versions
        with the goal ofwriting Python code that is compatible on both Python versions.  See
        thedocumentation for more information on what is provided.Six supports Python
        2.7 and 3.3+.  It is contained in only one Pythonfile, so it can be easily
        copied into your project. (The copyright and licensenotice must be retained.)Online
        documentation is at https://six.readthedocs.io/.Bugs can be reported to https://github.com/benjaminp/six.  The
        code can alsobe found there.'
      Package: six
      Source: pip
      Version: 1.16.0
      Hash: ''
      licenses:
      - MIT
      Title: six
      DownloadURL: https://files.pythonhosted.org/packages/d9/5a/e7c31adbe875f2abbb91bd84cf2dc52d792b5a01506781dbcf25c91daf11/six-1.16.0-py2.py3-none-any.whl
  bazaar:
    register: 'no'
    prim: 13/CAX1056543
    community_link: https://pythonhosted.org/six/
    community_name: https://pythonhosted.org/six/
    community_url: https://pythonhosted.org/six/
    component_comment: ''
    component_highlevel_description: Six is a Python 2 and 3 compatibility library.  It
      provides utility functions for smoothing over the differences between the Python
      versions with the goal of writing Python code that is compatible on both Python
      versions
    component_name: six
    component_platform: linux
    component_programing_language: Python
    component_version: 1.16.0
    licenses:
    - FAL1159008 (MIT License (MIT))
    src_download_link: https://github.com/benjaminp/six/archive/refs/tags/1.16.0.zip
    stako_decision_reason: allowed
    stako: ESW3
    stako_comment: Product version is older than 18 months
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=970756&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: United States
    crypto: N/A
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: six
    target_sw: linux
    vendor: pip
    version: 1.16.0
    web_url: https://github.com/benjaminp/six
  licenses:
  - MIT
  name: six
  primary:
  - this
  subcomponent: false
  type: FOSS
  versions:
  - 1.16.0
  mimer:
    linking: Static
    product_number: CAX1056543
    product_version_label: 1.16.0
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'True'
  alerts:
  - '''six'': Manual set stako_decision_reason: ''allowed'' for stako: ''ESW3'', team
    takes the risk!'
  - '''970756'': Manual set stako_decision_reason: ''allowed'' for stako: ''ESW3'',
    team takes the risk!'
- ID: threadloop+1.0.2
  additional_info:
    fossa-attribution:
      Description: 'ThreadLoop==========|build-status| |coverage| |pypi|    Run Tornado
        Coroutines from Synchronous Python... code:: python    from threadloop import
        ThreadLoop    from tornado import gen    @gen.coroutine    def coroutine(greeting="Goodbye"):        yield
        gen.sleep(1)        raise gen.Return("%s World" % greeting)    with ThreadLoop()
        as threadloop:        future = threadloop.submit(coroutine, "Hello")        print
        future.result() # Hello World.. |build-status| image:: https://travis-ci.org/breerly/threadloop.svg?branch=master    :target:
        https://travis-ci.org/breerly/threadloop.. |coverage| image:: https://coveralls.io/repos/breerly/threadloop/badge.svg?branch=master&service=github    :target:
        https://coveralls.io/github/breerly/threadloop?branch=master.. |pypi| image::
        https://badge.fury.io/py/threadloop.svg    :target: http://badge.fury.io/py/threadloop'
      Package: threadloop
      Source: pip
      Version: 1.0.2
      Hash: ''
      licenses:
      - MIT
      Title: threadloop
      DownloadURL: https://files.pythonhosted.org/packages/d3/1d/8398c1645b97dc008d3c658e04beda01ede3d90943d40c8d56863cf891bd/threadloop-1.0.2.tar.gz
  bazaar:
    register: 'no'
    prim: 1/CTX1025956
    community_link: https://github.com/breerly/threadloop
    community_name: https://github.com/breerly/threadloop
    community_url: https://github.com/breerly/threadloop
    component_comment: ''
    component_highlevel_description: Run Tornado Coroutines from Synchronous Python.
    component_name: ThreadLoop
    component_platform: linux
    component_programing_language: Python
    component_version: 1.0.2
    licenses:
    - FAL1159008 (MIT License (MIT))
    src_download_link: https://github.com/breerly/threadloop/archive/1.0.2.tar.gz
    stako_decision_reason: allowed
    stako: ESW4
    stako_comment: Product version is older than 54 months
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=914627&id-filter=equals&rowDisplay=Card-Simple
    recode: RE1
    retext: PRODUCT VERSION IS OLDER THAN 54 MONTHS
    country: United States
    crypto: No Encryption
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: threadloop
    target_sw: linux
    vendor: pip
    version: 1.0.2
    web_url: https://github.com/breerly/threadloop
  licenses:
  - MIT
  name: threadloop
  primary:
  - this
  subcomponent: false
  type: FOSS
  versions:
  - 1.0.2
  mimer:
    linking: Static
    product_number: CTX1025956
    product_version_label: 1.0.2
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'True'
  alerts:
  - Stako is 'ESW4', BAZAAR component is not recommended to be used
- ID: thrift+0.16.0
  additional_info:
    fossa-attribution:
      Description: Thrift Python Software LibraryLicense=======Licensed to the Apache
        Software Foundation (ASF) under oneor more contributor license agreements.
        See the NOTICE filedistributed with this work for additional informationregarding
        copyright ownership. The ASF licenses this fileto you under the Apache License,
        Version 2.0 (the"License"); you may not use this file except in compliancewith
        the License. You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0Unless
        required by applicable law or agreed to in writing,software distributed under
        the License is distributed on an"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS
        OF ANYKIND, either express or implied. See the License for thespecific language
        governing permissions and limitationsunder the License.Using Thrift with Python========================Thrift
        is provided as a set of Python packages. The top level package isthrift, and
        there are subpackages for the protocol, transport, and servercode. Each package
        contains modules using standard Thrift naming conventions(i.e. TProtocol,
        TTransport) and implementations in corresponding modules(i.e. TSocket).  There
        is also a subpackage reflection, which containsthe generated code for the
        reflection structures.The Python libraries can be installed manually using
        the provided setup.pyfile, or automatically using the install hook provided
        via autoconf/automake.To use the latter, become superuser and do make install.
      Package: thrift
      Source: pip
      Version: 0.16.0
      Hash: ''
      licenses:
      - Apache-2.0
      Title: thrift
      DownloadURL: https://files.pythonhosted.org/packages/e4/23/dd951c9883cb49a73b750bdfe91e39d78e8a3f1f7175608634f381a197d5/thrift-0.16.0.tar.gz
  bazaar:
    register: 'no'
    prim: 20/CAX1055265
    community_link: https://github.com/apache/thrift
    community_name: https://github.com/apache/thrift
    community_url: https://github.com/apache/thrift
    component_comment: ''
    component_highlevel_description: Thrift is a software framework for scalable cross-language
      services development, combining a software stack with a code generation engine
      to build services that work efficiently and seamlessly between different languages.
    component_name: Thrift, Apache
    component_platform: linux
    component_programing_language: C++
    component_version: V0.16.0
    licenses:
    - FAL1159004/20 (Apache License 2.0 (Apache-2.0))
    src_download_link: https://github.com/apache/thrift/archive/v0.16.0.tar.gz
    stako_decision_reason: allowed
    stako: ESW3
    stako_comment: Product version is older than 18 months
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1043054&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: United States
    crypto: No Encryption
    programming_language: C++
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: thrift
    target_sw: linux
    vendor: pip
    version: 0.16.0
    web_url: http://thrift.apache.org
  licenses:
  - Apache-2.0
  name: thrift
  primary:
  - this
  subcomponent: false
  type: FOSS
  versions:
  - 0.16.0
  mimer:
    linking: Static
    product_number: CAX1055265
    product_version_label: v0.16.0
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'True'
    selected_licenses:
    - Apache-2.0
  alerts:
  - Stako is 'ESW3', BAZAAR component is not recommended to be used
  - '''1043054'': Manual set stako_decision_reason: ''allowed'' for stako: ''ESW3'',
    team takes the risk!'
- ID: tornado+6.3.3
  additional_info:
    fossa-attribution:
      Description: 'Tornado Web Server==================.. image:: https://badges.gitter.im/Join%20Chat.svg   :alt:
        Join the chat at https://gitter.im/tornadoweb/tornado   :target: https://gitter.im/tornadoweb/tornado?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge`Tornado
        <http://www.tornadoweb.org>`_ is a Python web framework andasynchronous networking
        library, originally developed at `FriendFeed<http://friendfeed.com>`_.  By
        using non-blocking network I/O, Tornadocan scale to tens of thousands of open
        connections, making it ideal for`long polling <http://en.wikipedia.org/wiki/Push_technology#Long_Polling>`_,`WebSockets
        <http://en.wikipedia.org/wiki/WebSocket>`_, and otherapplications that require
        a long-lived connection to each user.Hello, world------------Here is a simple
        "Hello, world" example web app for Tornado:.. code-block:: python    import
        asyncio    import tornado    class MainHandler(tornado.web.RequestHandler):        def
        get(self):            self.write("Hello, world")    def make_app():        return
        tornado.web.Application([            (r"/", MainHandler),        ])    async
        def main():        app = make_app()        app.listen(8888)        await asyncio.Event().wait()    if
        __name__ == "__main__":        asyncio.run(main())This example does not use
        any of Tornado''s asynchronous features; forthat see this `simple chat room<https://github.com/tornadoweb/tornado/tree/stable/demos/chat>`_.Documentation-------------Documentation
        and links to additional resources are available athttps://www.tornadoweb.org'
      Package: tornado
      Source: pip
      Version: 6.3.3
      Hash: ''
      licenses:
      - Apache-2.0
      Title: tornado
      DownloadURL: https://files.pythonhosted.org/packages/48/64/679260ca0c3742e2236c693dc6c34fb8b153c14c21d2aa2077c5a01924d6/tornado-6.3.3.tar.gz
  bazaar:
    register: 'no'
    prim: 19/CAX1057590
    community_link: https://github.com/tornadoweb/tornado
    community_name: https://github.com/tornadoweb/tornado
    community_url: https://github.com/tornadoweb/tornado
    component_comment: ''
    component_highlevel_description: Tornado is a Python web framework and asynchronous
      networking library, originally developed at FriendFeed.
    component_name: tornado
    component_platform: linux
    component_programing_language: Python
    component_version: V6.3.3
    licenses:
    - FAL1159004/20 (Apache License 2.0 (Apache-2.0))
    src_download_link: https://github.com/tornadoweb/tornado/archive/v6.3.3.tar.gz
    stako_decision_reason: automatic
    stako: ESW2
    stako_comment: ''
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1059576&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: United States
    crypto: ''
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: tornado
    target_sw: linux
    vendor: pip
    version: 6.3.3
    web_url: http://www.tornadoweb.org/
  licenses:
  - Apache-2.0
  name: tornado
  primary:
  - this
  subcomponent: false
  type: FOSS
  versions:
  - 6.3.3
  mimer:
    linking: Static
    product_number: CAX1057590
    product_version_label: 6.3.3
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'True'
  alerts:
  - Stako is 'ESW2', BAZAAR/SCAS component is not recommended to be used
- ID: urllib3+1.26.16
  additional_info:
    fossa-attribution:
      Description: "<h1 align=\"center\">![urllib3](https://github.com/urllib3/urllib3/raw/main/docs/_static/banner_github.svg)</h1><p
        align=\"center\">  <a href=\"https://pypi.org/project/urllib3\"><img alt=\"PyPI
        Version\" src=\"https://img.shields.io/pypi/v/urllib3.svg?maxAge=86400\" /></a>
        \ <a href=\"https://pypi.org/project/urllib3\"><img alt=\"Python Versions\"
        src=\"https://img.shields.io/pypi/pyversions/urllib3.svg?maxAge=86400\" /></a>
        \ <a href=\"https://discord.gg/urllib3\"><img alt=\"Join our Discord\" src=\"https://img.shields.io/discord/756342717725933608?color=%237289da&label=discord\"
        /></a>  <a href=\"https://github.com/urllib3/urllib3/actions?query=workflow%3ACI\"><img
        alt=\"Coverage Status\" src=\"https://img.shields.io/badge/coverage-100%25-success\"
        /></a>  <a href=\"https://github.com/urllib3/urllib3/actions?query=workflow%3ACI\"><img
        alt=\"Build Status on GitHub\" src=\"https://github.com/urllib3/urllib3/workflows/CI/badge.svg\"
        /></a>  <a href=\"https://urllib3.readthedocs.io\"><img alt=\"Documentation
        Status\" src=\"https://readthedocs.org/projects/urllib3/badge/?version=latest\"
        /></a><br>  <a href=\"https://deps.dev/pypi/urllib3\"><img alt=\"OpenSSF Scorecard\"
        src=\"https://api.securityscorecards.dev/projects/github.com/urllib3/urllib3/badge\"
        /></a>  <a href=\"https://slsa.dev\"><img alt=\"SLSA 3\" src=\"https://slsa.dev/images/gh-badge-level3.svg\"
        /></a>  <a href=\"https://bestpractices.coreinfrastructure.org/projects/6227\"><img
        alt=\"CII Best Practices\" src=\"https://bestpractices.coreinfrastructure.org/projects/6227/badge\"
        /></a></p>urllib3 is a powerful, *user-friendly* HTTP client for Python. Much
        of thePython ecosystem already uses urllib3 and you should too.urllib3 brings
        many critical features that are missing from the Pythonstandard libraries:-
        Thread safety.- Connection pooling.- Client-side SSL/TLS verification.- File
        uploads with multipart encoding.- Helpers for retrying requests and dealing
        with HTTP redirects.- Support for gzip, deflate, brotli, and zstd encoding.-
        Proxy support for HTTP and SOCKS.- 100% test coverage.urllib3 is powerful
        and easy to use:```python3>>> import urllib3>>> resp = urllib3.request(\"GET\",
        \"http://httpbin.org/robots.txt\")>>> resp.status200>>> resp.datab\"User-agent:
        *\\nDisallow: /deny\\n\"```## Installingurllib3 can be installed with [pip](https://pip.pypa.io):```bash$
        python -m pip install urllib3```Alternatively, you can grab the latest source
        code from [GitHub](https://github.com/urllib3/urllib3):```bash$ git clone
        https://github.com/urllib3/urllib3.git$ cd urllib3$ pip install .```## Documentationurllib3
        has usage and reference documentation at [urllib3.readthedocs.io](https://urllib3.readthedocs.io).##
        Communityurllib3 has a [community Discord channel](https://discord.gg/urllib3)
        for asking questions andcollaborating with other contributors. Drop by and
        say hello \U0001F44B## Contributingurllib3 happily accepts contributions.
        Please see our[contributing documentation](https://urllib3.readthedocs.io/en/latest/contributing.html)for
        some tips on getting started.## Security DisclosuresTo report a security vulnerability,
        please use the[Tidelift security contact](https://tidelift.com/security).Tidelift
        will coordinate the fix and disclosure with maintainers.## Maintainers- [@sethmlarson](https://github.com/sethmlarson)
        (Seth M. Larson)- [@pquentin](https://github.com/pquentin) (Quentin Pradet)-
        [@theacodes](https://github.com/theacodes) (Thea Flowers)- [@haikuginger](https://github.com/haikuginger)
        (Jess Shapiro)- [@lukasa](https://github.com/lukasa) (Cory Benfield)- [@sigmavirus24](https://github.com/sigmavirus24)
        (Ian Stapleton Cordasco)- [@shazow](https://github.com/shazow) (Andrey Petrov)\U0001F44B##
        SponsorshipIf your company benefits from this library, please consider [sponsoring
        itsdevelopment](https://urllib3.readthedocs.io/en/latest/sponsors.html).##
        For EnterpriseProfessional support for urllib3 is available as part of the
        [TideliftSubscription][1].  Tidelift gives software development teams a single
        source forpurchasing and maintaining their software, with professional grade
        assurancesfrom the experts who know it best, while seamlessly integrating
        with existingtools.[1]: https://tidelift.com/subscription/pkg/pypi-urllib3?utm_source=pypi-urllib3&utm_medium=referral&utm_campaign=readme"
      Package: urllib3
      Source: pip
      Version: 1.26.16
      Hash: ''
      licenses:
      - Apache-2.0
      - MIT
      - Python-2.0
      Title: urllib3
      DownloadURL: https://files.pythonhosted.org/packages/e2/7d/539e6f0cf9f0b95b71dd701a56dae89f768cd39fd8ce0096af3546aeb5a3/urllib3-1.26.16.tar.gz
  bazaar:
    register: 'no'
    prim: 38/CAX1057288
    community_link: https://pypi.org/project/urllib3
    community_name: https://pypi.org/project/urllib3
    community_url: https://pypi.org/project/urllib3
    component_comment: ''
    component_highlevel_description: Python HTTP library with thread-safe connection
      pooling, file post support, sanity friendly, and more.
    component_name: urllib3
    component_platform: linux
    component_programing_language: Python
    component_version: 1.26.16
    licenses:
    - FAL1159008 (MIT License (MIT))
    src_download_link: https://files.pythonhosted.org/packages/e2/7d/539e6f0cf9f0b95b71dd701a56dae89f768cd39fd8ce0096af3546aeb5a3/urllib3-1.26.16.tar.gz
    stako_decision_reason: allowed
    stako: ESW3
    stako_comment: Newer versions exists
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1047957&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: Canada
    crypto: 'NO'
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: urllib3
    target_sw: linux
    vendor: pip
    version: 1.26.16
    web_url: https://pypi.org/project/urllib3/2.0.4/
  licenses:
  - Apache-2.0
  - MIT
  - Python-2.0
  name: urllib3
  primary:
  - this
  subcomponent: false
  type: FOSS
  versions:
  - 1.26.16
  mimer:
    linking: Static
    product_number: CAX1057288
    product_version_label: 1.26.16
    selected_licenses:
    - MIT
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'True'
  alerts:
  - Stako is 'ESW3', BAZAAR component is not recommended to be used
  - '''1047957'': Manual set stako_decision_reason: ''allowed'' for stako: ''ESW3'',
    team takes the risk!'
- ID: Werkzeug+2.2.3
  additional_info:
    fossa-attribution:
      Description: 'Werkzeug========*werkzeug* German noun: "tool". Etymology: *werk*
        ("work"), *zeug* ("stuff")Werkzeug is a comprehensive `WSGI`_ web application
        library. It began asa simple collection of various utilities for WSGI applications
        and hasbecome one of the most advanced WSGI utility libraries.It includes:-   An
        interactive debugger that allows inspecting stack traces and    source code
        in the browser with an interactive interpreter for any    frame in the stack.-   A
        full-featured request object with objects to interact with    headers, query
        args, form data, files, and cookies.-   A response object that can wrap other
        WSGI applications and handle    streaming data.-   A routing system for matching
        URLs to endpoints and generating URLs    for endpoints, with an extensible
        system for capturing variables    from URLs.-   HTTP utilities to handle entity
        tags, cache control, dates, user    agents, cookies, files, and more.-   A
        threaded WSGI server for use while developing applications    locally.-   A
        test client for simulating HTTP requests during testing without    requiring
        running a server.Werkzeug doesn''t enforce any dependencies. It is up to the
        developer tochoose a template engine, database adapter, and even how to handlerequests.
        It can be used to build all sorts of end user applicationssuch as blogs, wikis,
        or bulletin boards.`Flask`_ wraps Werkzeug, using it to handle the details
        of WSGI whileproviding more structure and patterns for defining powerfulapplications...
        _WSGI: https://wsgi.readthedocs.io/en/latest/.. _Flask: https://www.palletsprojects.com/p/flask/Installing----------Install
        and update using `pip`_:.. code-block:: text    pip install -U Werkzeug..
        _pip: https://pip.pypa.io/en/stable/getting-started/A Simple Example----------------..
        code-block:: python    from werkzeug.wrappers import Request, Response    @Request.application    def
        application(request):        return Response(''Hello, World!'')    if __name__
        == ''__main__'':        from werkzeug.serving import run_simple        run_simple(''localhost'',
        4000, application)Donate------The Pallets organization develops and supports
        Werkzeug and otherpopular packages. In order to grow the community of contributors
        andusers, and allow the maintainers to devote more time to the projects,`please
        donate today`_... _please donate today: https://palletsprojects.com/donateLinks------   Documentation:
        https://werkzeug.palletsprojects.com/-   Changes: https://werkzeug.palletsprojects.com/changes/-   PyPI
        Releases: https://pypi.org/project/Werkzeug/-   Source Code: https://github.com/pallets/werkzeug/-   Issue
        Tracker: https://github.com/pallets/werkzeug/issues/-   Chat: https://discord.gg/pallets'
      Package: Werkzeug
      Source: pip
      Version: 2.2.3
      Hash: ''
      licenses:
      - BSD-3-Clause
      - CC-BY-2.5
      - CC-BY-3.0
      Title: Werkzeug
      DownloadURL: https://files.pythonhosted.org/packages/02/3c/baaebf3235c87d61d6593467056d5a8fba7c75ac838b8d100a5e64eba7a0/Werkzeug-2.2.3.tar.gz
  bazaar:
    register: 'no'
    prim: 22/CAX1057065
    community_link: https://github.com/pallets/werkzeug
    community_name: https://github.com/pallets/werkzeug
    community_url: https://github.com/pallets/werkzeug
    component_comment: ''
    component_highlevel_description: 'Werkzeug started as simple collection of various
      utilities for WSGI applications

      and has become one of the most advanced WSGI utility modules.'
    component_name: Werkzeug
    component_platform: linux
    component_programing_language: Python
    component_version: 2.2.3
    licenses:
    - FAL1159003/2 (BSD 3-Clause (BSD-3-Clause))
    src_download_link: https://github.com/pallets/werkzeug/archive/2.2.3.tar.gz
    stako_decision_reason: allowed
    stako: ESW3
    stako_comment: Newer versions exists
    bazaarurl: https://scas.internal.ericsson.com/search3pp?id=1037588&id-filter=equals&rowDisplay=Card-Simple
    recode: ''
    retext: ''
    country: Austria
    crypto: No Encryption
    programming_language: Python
  encryptions:
    used:
    - ''
  evms:
    register: 'yes'
    product_name: Werkzeug
    target_sw: linux
    vendor: pip
    version: 2.2.3
    web_url: https://palletsprojects.com/p/werkzeug/
  licenses:
  - BSD-3-Clause
  name: Werkzeug
  primary:
  - this
  subcomponent: false
  type: FOSS
  versions:
  - 2.2.3
  mimer:
    linking: Static
    product_number: CAX1057065
    product_version_label: 2.2.3
    obligation: Including the full license text in a prominent place with the software
      when the FOSS is distributed
    usage: Use as is
    primary: 'True'
  alerts:
  - Stako is 'ESW3', BAZAAR/SCAS component is not recommended to be used
